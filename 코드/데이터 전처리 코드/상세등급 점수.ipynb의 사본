{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"KuYRIr6YVX-R"},"outputs":[],"source":["import pandas as pd\n","df=pd.read_excel('/content/drive/MyDrive/KDT/최종 프로젝트/제목없는 폴더9/0704_데이터_v003_지원한국제지대체2_최종.xlsx')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":311,"status":"ok","timestamp":1721104662676,"user":{"displayName":"노재민","userId":"10900486183626163831"},"user_tz":-540},"id":"fTGYeV4RdUgy","outputId":"e8273b43-91de-42bb-e861-7cf9f35b2b41"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['index', '종합등급', '자산총계', '녹색 기업 지정', '매출액', '영업이익', '영업이익(발표기준)',\n","       '당기순이익', '지배주주순이익', '비지배주주순이익',\n","       ...\n","       '남성 직원 비율_cluster', '여성 직원 비율_cluster', '사외이사 비율_cluster',\n","       '여성 임원 비율_cluster', '남성 평균 연봉_cluster', '여성 평균 연봉_cluster',\n","       '남성 정규직 비율_cluster', '여성 정규직 비율_cluster', '장애인고용률_cluster',\n","       '장애인근로자수_cluster'],\n","      dtype='object', length=110)"]},"metadata":{},"execution_count":82}],"source":["df.columns"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":308,"status":"ok","timestamp":1721117189629,"user":{"displayName":"노재민","userId":"10900486183626163831"},"user_tz":-540},"id":"7F2VizzLlwi2","outputId":"1ee0eefd-5790-4562-de37-74bbe360c7d9"},"outputs":[{"output_type":"stream","name":"stdout","text":["          index  years       회사명  stock_code 전년도ESG 종합등급      매출액  영업이익  \\\n","0    2019-12-01   2019      동화약품          20    NaN    B   3072.0    96   \n","1    2020-12-01   2020      동화약품          20      B    B   2721.0   232   \n","2    2021-12-01   2021      동화약품          20      B    C   2930.0   225   \n","3    2022-12-01   2022      동화약품          20      C    C   3404.0   299   \n","4    2023-12-01   2023      동화약품          20      C  NaN   3611.0   188   \n","...         ...    ...       ...         ...    ...  ...      ...   ...   \n","3979 2023-12-01   2023       F&F      383220     B+  NaN  19785.0  5518   \n","3980 2022-12-01   2022  에코프로에이치엔      383310    NaN    B   2182.0   414   \n","3981 2023-12-01   2023  에코프로에이치엔      383310      B  NaN   2289.0   418   \n","3982 2022-12-01   2022     LX홀딩스      383800    NaN   B+   2369.0  1589   \n","3983 2023-12-01   2023     LX홀딩스      383800     B+  NaN   1181.0   732   \n","\n","      영업이익(발표기준)  당기순이익  ...  N남성 직원 수  N직원 수  N사외이사 수  N여성 정규직 수  N여성 직원 수  \\\n","0             96     91  ...       NaN    NaN        0          0         0   \n","1            232    287  ...       2.0    2.0        2          3         3   \n","2            225    196  ...       2.0    2.0        2          3         3   \n","3            299    216  ...       2.0    2.0        2          3         3   \n","4            188    282  ...       2.0    2.0        2          3         3   \n","...          ...    ...  ...       ...    ...      ...        ...       ...   \n","3979        5518   4250  ...       1.0    2.0        1          3         3   \n","3980         414    324  ...       1.0    1.0        2          2         2   \n","3981         418    335  ...       1.0    1.0        2          2         2   \n","3982        1589   1701  ...       0.0    0.0        3          0         0   \n","3983         732    788  ...       0.0    0.0        3          0         0   \n","\n","      기업분류  상시근로자수  장애인고용의무인원  장애인근로자수  장애인고용률  \n","0        1     NaN        NaN      NaN     NaN  \n","1        1     NaN        NaN      NaN     NaN  \n","2        1     NaN        NaN      NaN     NaN  \n","3        1     NaN        NaN      NaN     NaN  \n","4        2     NaN        NaN      NaN     NaN  \n","...    ...     ...        ...      ...     ...  \n","3979     3     NaN        NaN      NaN     NaN  \n","3980     1     NaN        NaN      NaN     NaN  \n","3981     1     NaN        NaN      NaN     NaN  \n","3982     3     NaN        NaN      NaN     NaN  \n","3983     3     NaN        NaN      NaN     NaN  \n","\n","[3984 rows x 88 columns]\n"]}],"source":["mapping = {1: 5, 2: 4, 3: 3, 4: 2, 5: 1}\n","\n","# '기업분류' 컬럼을 매핑하여 변환\n","df['기업분류'] = df['기업분류'].replace(mapping)\n","\n","print(df)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":353,"status":"ok","timestamp":1721117193130,"user":{"displayName":"노재민","userId":"10900486183626163831"},"user_tz":-540},"id":"R-GKXrrqnW82","outputId":"35c88ab3-e8f1-4599-84ba-a712ebd34063"},"outputs":[{"output_type":"stream","name":"stdout","text":["          index  years       회사명  stock_code 전년도ESG 종합등급      매출액  영업이익  \\\n","0    2019-12-01   2019      동화약품          20    NaN    B   3072.0    96   \n","1    2020-12-01   2020      동화약품          20      B    B   2721.0   232   \n","2    2021-12-01   2021      동화약품          20      B    C   2930.0   225   \n","3    2022-12-01   2022      동화약품          20      C    C   3404.0   299   \n","4    2023-12-01   2023      동화약품          20      C  NaN   3611.0   188   \n","...         ...    ...       ...         ...    ...  ...      ...   ...   \n","3979 2023-12-01   2023       F&F      383220     B+  NaN  19785.0  5518   \n","3980 2022-12-01   2022  에코프로에이치엔      383310    NaN    B   2182.0   414   \n","3981 2023-12-01   2023  에코프로에이치엔      383310      B  NaN   2289.0   418   \n","3982 2022-12-01   2022     LX홀딩스      383800    NaN   B+   2369.0  1589   \n","3983 2023-12-01   2023     LX홀딩스      383800     B+  NaN   1181.0   732   \n","\n","      영업이익(발표기준)  당기순이익  ...  N직원 수  N사외이사 수  N여성 정규직 수  N여성 직원 수  기업분류  \\\n","0             96     91  ...    NaN        0          0         0     1   \n","1            232    287  ...    2.0        2          3         3     1   \n","2            225    196  ...    2.0        2          3         3     1   \n","3            299    216  ...    2.0        2          3         3     1   \n","4            188    282  ...    2.0        2          3         3     2   \n","...          ...    ...  ...    ...      ...        ...       ...   ...   \n","3979        5518   4250  ...    2.0        1          3         3     3   \n","3980         414    324  ...    1.0        2          2         2     1   \n","3981         418    335  ...    1.0        2          2         2     1   \n","3982        1589   1701  ...    0.0        3          0         0     3   \n","3983         732    788  ...    0.0        3          0         0     3   \n","\n","      상시근로자수  장애인고용의무인원  장애인근로자수  장애인고용률  N장애인고용률  \n","0        NaN        NaN      NaN     NaN      NaN  \n","1        NaN        NaN      NaN     NaN      NaN  \n","2        NaN        NaN      NaN     NaN      NaN  \n","3        NaN        NaN      NaN     NaN      NaN  \n","4        NaN        NaN      NaN     NaN      NaN  \n","...      ...        ...      ...     ...      ...  \n","3979     NaN        NaN      NaN     NaN      NaN  \n","3980     NaN        NaN      NaN     NaN      NaN  \n","3981     NaN        NaN      NaN     NaN      NaN  \n","3982     NaN        NaN      NaN     NaN      NaN  \n","3983     NaN        NaN      NaN     NaN      NaN  \n","\n","[3984 rows x 89 columns]\n"]}],"source":["# 비율에 맞게 4개의 범주로 나눌 경계 계산\n","percentiles = [0.50,0.9]  # 15%, 35%, 30%, 20% 경계\n","quantiles = df['장애인고용률'].quantile(percentiles).tolist()\n","\n","# 경계에 맞는 구간 레이블 설정\n","labels = ['2', '1', '0']\n","\n","# 값을 구간으로 나누고 레이블 할당\n","df['N장애인고용률'] = pd.cut(df['장애인고용률'], bins=[-np.inf] + quantiles + [np.inf], labels=labels, right=True, include_lowest=True)\n","\n","print(df)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"q2RJpjR-n0p6"},"outputs":[],"source":["# 새로운 카테고리 값 추가\n","df['N장애인고용률'] = df['N장애인고용률'].cat.add_categories([3])\n","\n","# 결측값 채우기\n","df['N장애인고용률'] = df['N장애인고용률'].fillna(3)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"EJf-CYcnoo8w"},"outputs":[],"source":["# df['남녀직원수차이']="]},{"cell_type":"code","execution_count":null,"metadata":{"id":"48n_-KA2r3KQ"},"outputs":[],"source":["df.to_excel('/content/drive/MyDrive/KDT/최종 프로젝트/제목없는 폴더9/0704_데이터_v003_지원한국제지대체2_최종2.xlsx',index=False)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"A6HyuaZkZ8ji"},"outputs":[],"source":["import pandas as pd"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hBTa4dR3-gdL"},"outputs":[],"source":["df=pd.read_excel('/content/drive/MyDrive/KDT/최종 프로젝트/제목없는 폴더11/0710진짜최종태완.xlsx')"]},{"cell_type":"code","source":["df=pd.read_excel('/content/drive/MyDrive/KDT/최종 프로젝트/제목없는 폴더7/전처리한데이터 (1).xlsx')"],"metadata":{"id":"kY6fYqpt1CUy"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Jqvv-kRseDNM"},"outputs":[],"source":["import numpy as np\n","# 비율에 맞게 4개의 범주로 나눌 경계 계산\n","percentiles = [0.15, 0.50, 0.80]  # 15%, 35%, 30%, 20% 경계\n","quantiles = df['배당수익률'].quantile(percentiles).tolist()\n","quantiles = df['외국인 지분율'].quantile(percentiles).tolist()\n","quantiles = df['유보율'].quantile(percentiles).tolist()\n","quantiles = df['사외이사 비율'].quantile(percentiles).tolist()\n","quantiles = df['자본비율'].quantile(percentiles).tolist()\n","quantiles = df['매출액_상승률(퍼센트)'].quantile(percentiles).tolist()\n","quantiles = df['영업이익_상승률'].quantile(percentiles).tolist()\n","quantiles = df['배당수익률_상승률'].quantile(percentiles).tolist()\n","quantiles = df['영업이익률_상승률'].quantile(percentiles).tolist()\n","quantiles = df['지배주주순이익률'].quantile(percentiles).tolist()\n","# 경계에 맞는 구간 레이블 설정\n","labels = ['0', '1', '2', '3']\n","\n","# 값을 구간으로 나누고 레이블 할당\n","df['N배당수익률'] = pd.cut(df['배당수익률'], bins=[-np.inf] + quantiles + [np.inf], labels=labels, right=True, include_lowest=True)\n","df['N외국인 지분율'] = pd.cut(df['외국인 지분율'], bins=[-np.inf] + quantiles + [np.inf], labels=labels, right=True, include_lowest=True)\n","df['N유보율'] = pd.cut(df['유보율'], bins=[-np.inf] + quantiles + [np.inf], labels=labels, right=True, include_lowest=True)\n","df['N사외이사 비율'] = pd.cut(df['사외이사 비율'], bins=[-np.inf] + quantiles + [np.inf], labels=labels, right=True, include_lowest=True)\n","df['N자본비율'] = pd.cut(df['자본비율'], bins=[-np.inf] + quantiles + [np.inf], labels=labels, right=True, include_lowest=True)\n","df['N매출액_상승률'] = pd.cut(df['매출액_상승률(퍼센트)'], bins=[-np.inf] + quantiles + [np.inf], labels=labels, right=True, include_lowest=True)\n","df['N영업이익_상승률'] = pd.cut(df['영업이익_상승률'], bins=[-np.inf] + quantiles + [np.inf], labels=labels, right=True, include_lowest=True)\n","df['N배당수익률_상승률'] = pd.cut(df['배당수익률_상승률'], bins=[-np.inf] + quantiles + [np.inf], labels=labels, right=True, include_lowest=True)\n","df['N영업이익률_상승률'] = pd.cut(df['영업이익률_상승률'], bins=[-np.inf] + quantiles + [np.inf], labels=labels, right=True, include_lowest=True)\n","df['N지배주주순이익률'] = pd.cut(df['지배주주순이익률'], bins=[-np.inf] + quantiles + [np.inf], labels=labels, right=True, include_lowest=True)"]},{"cell_type":"code","source":["import numpy as np\n","# 비율에 맞게 4개의 범주로 나눌 경계 계산\n","percentiles = [ 0.11,0.189,0.352, 0.496, 0.786]  # 15%, 35%, 30%, 20% 경계\n","quantiles = df['배당수익률'].quantile(percentiles).tolist()\n","quantiles = df['외국인 지분율'].quantile(percentiles).tolist()\n","quantiles = df['유보율'].quantile(percentiles).tolist()\n","quantiles = df['사외이사 비율'].quantile(percentiles).tolist()\n","quantiles = df['자본비율'].quantile(percentiles).tolist()\n","quantiles = df['매출액_상승률(퍼센트)'].quantile(percentiles).tolist()\n","quantiles = df['영업이익_상승률'].quantile(percentiles).tolist()\n","quantiles = df['배당수익률_상승률'].quantile(percentiles).tolist()\n","quantiles = df['영업이익률_상승률'].quantile(percentiles).tolist()\n","quantiles = df['지배주주순이익률'].quantile(percentiles).tolist()\n","# 경계에 맞는 구간 레이블 설정\n","labels = ['0', '1', '2', '3','4','5']\n","\n","# 값을 구간으로 나누고 레이블 할당\n","df['N배당수익률'] = pd.cut(df['배당수익률'], bins=[-np.inf] + quantiles + [np.inf], labels=labels, right=True, include_lowest=True)\n","df['N외국인 지분율'] = pd.cut(df['외국인 지분율'], bins=[-np.inf] + quantiles + [np.inf], labels=labels, right=True, include_lowest=True)\n","df['N유보율'] = pd.cut(df['유보율'], bins=[-np.inf] + quantiles + [np.inf], labels=labels, right=True, include_lowest=True)\n","df['N사외이사 비율'] = pd.cut(df['사외이사 비율'], bins=[-np.inf] + quantiles + [np.inf], labels=labels, right=True, include_lowest=True)\n","df['N자본비율'] = pd.cut(df['자본비율'], bins=[-np.inf] + quantiles + [np.inf], labels=labels, right=True, include_lowest=True)\n","df['N매출액_상승률'] = pd.cut(df['매출액_상승률(퍼센트)'], bins=[-np.inf] + quantiles + [np.inf], labels=labels, right=True, include_lowest=True)\n","df['N영업이익_상승률'] = pd.cut(df['영업이익_상승률'], bins=[-np.inf] + quantiles + [np.inf], labels=labels, right=True, include_lowest=True)\n","df['N배당수익률_상승률'] = pd.cut(df['배당수익률_상승률'], bins=[-np.inf] + quantiles + [np.inf], labels=labels, right=True, include_lowest=True)\n","df['N영업이익률_상승률'] = pd.cut(df['영업이익률_상승률'], bins=[-np.inf] + quantiles + [np.inf], labels=labels, right=True, include_lowest=True)\n","df['N지배주주순이익률'] = pd.cut(df['지배주주순이익률'], bins=[-np.inf] + quantiles + [np.inf], labels=labels, right=True, include_lowest=True)"],"metadata":{"id":"A9yqZ5MHY6TQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"av9jlm2lkfN3"},"outputs":[],"source":["import pandas as pd"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":292,"status":"ok","timestamp":1721117209360,"user":{"displayName":"노재민","userId":"10900486183626163831"},"user_tz":-540},"id":"fsRsVyGEaJ65","outputId":"f82704f7-d34a-4fda-fce7-c1fa14db43fc"},"outputs":[{"output_type":"stream","name":"stdout","text":["Data types before conversion:\n","N시가총액              int64\n","N매출액             float64\n","N자산총계              int64\n","N직원 수            float64\n","N자본총계              int64\n","N매출액_상승률        category\n","N영업이익_상승률       category\n","N배당수익률_상승률      category\n","지배주주순이익률         float64\n","N외국인 지분율        category\n","기업분류               int64\n","사외이사 비율          float64\n","용수 사용량 등급          int64\n","에너지 총량 등급          int64\n","온실가스 배출총량 등급       int64\n","RE100            float64\n","녹색 기업 지정           int64\n","sbti               int64\n","high_carbon        int64\n","N장애인고용률         category\n","N남성 정규직 수        float64\n","N여성 정규직 수          int64\n","N여성 직원 수           int64\n","N영업이익률_상승률      category\n","N지배주주순이익률       category\n","dtype: object\n"]}],"source":["cols_to_convert = [\n","    'N시가총액', 'N매출액', 'N자산총계', 'N직원 수', 'N자본총계',\n","    'N매출액_상승률', 'N영업이익_상승률', 'N배당수익률_상승률', '지배주주순이익률',\n","    'N외국인 지분율', '기업분류', '사외이사 비율', '용수 사용량 등급', '에너지 총량 등급',\n","    '온실가스 배출총량 등급','RE100', '녹색 기업 지정', 'sbti', 'high_carbon',\n","    'N장애인고용률', 'N남성 정규직 수', 'N여성 정규직 수', 'N여성 직원 수','N영업이익률_상승률','N지배주주순이익률'\n","]\n","\n","# 각 열의 데이터 타입 확인\n","print(\"Data types before conversion:\")\n","print(df[cols_to_convert].dtypes)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"s8F1RAeccQTO"},"outputs":[],"source":["df[cols_to_convert] = df[cols_to_convert].apply(pd.to_numeric, errors='coerce')"]},{"cell_type":"code","source":["df['RE100']=df['RE100'].fillna(0)"],"metadata":{"id":"K5ThsOLiXslx"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"iavhty7BcEJ1"},"source":[]},{"cell_type":"markdown","metadata":{"id":"eFNqEcCOVKD8"},"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"c1Zq2YeXjRH3"},"outputs":[],"source":["df['L재무구조']=df['N시가총액']*0.11+df['N매출액']*0.44+df['N자산총계']*0.11+df['N직원 수']*0.16+df['N자본총계']*0.18\n","df['L성장성']=df['N매출액_상승률']*0.13+df['N영업이익_상승률']*0.14+df['N배당수익률_상승률']*0.30+df['N영업이익률_상승률']*0.13\n","df['L지배구조']=df['N외국인 지분율']*0.19+df['N지배주주순이익률']*0.05+df['기업분류']*0.02+df['사외이사 비율']*0.73 #df['기업규모']+\n","df['L환경']=df['용수 사용량 등급']*0.08+df['에너지 총량 등급']*0.35+df['온실가스 배출총량 등급']*0.26-df['녹색 기업 지정']*0.08-df['RE100']*0.07-df['sbti']*0.07-df['high_carbon']*0.07 # 낮은게좋은거,-df['high_carbon']\n","df['L사회']=df['N장애인고용률']*0.29+df['N남성 정규직 수']*0.21+df['N여성 정규직 수']*0.25+df['N여성 직원 수']*0.24"]},{"cell_type":"code","source":["df['L재무구조']=df['N시가총액']*0.11+df['N매출액']*0.44+df['N자산총계']*0.11+df['N직원 수']*0.16+df['N자본총계']*0.18\n","df['L성장성']=df['N매출액_상승률']*0.13+df['N영업이익_상승률']*0.14+df['N배당수익률_상승률']*0.30+df['N영업이익률_상승률']*0.13\n","df['L지배구조']=df['N외국인 지분율']*0.19+df['N지배주주순이익률']*0.05+df['기업분류']*0.02+df['사외이사 비율']*0.73 #df['기업규모']+\n","df['L환경']=(df['용수 사용량 등급']*0.08+df['에너지 총량 등급']*0.35+df['온실가스 배출총량 등급']*0.26)-df['녹색 기업 지정']*0.08-df['RE100']*0.07-df['sbti']*0.07-df['high_carbon']*0.07 # 낮은게좋은거,-df['high_carbon']\n","df['L사회']=df['장애인고용률_cluster']*0.29+df['N남성 정규직 수']*0.21+df['N여성 정규직 수']*0.25+df['N여성 직원 수']*0.24"],"metadata":{"id":"9p_AX2Z_RAGH"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VB31uqbbUVgj"},"outputs":[],"source":["df['L재무구조']=df['N시가총액']*.35+df['N매출액']+df['N자산총계']+df['기업규모']+df['N자본총계']\n","df['L성장성']=df['N매출액_상승률']+df['N영업이익_상승률']+df['N배당수익률_상승률']+df['N영업이익률_상승률']\n","df['L지배구조']=df['N외국인 지분율']+df['N지배주주지분']+df['기업분류'] #df['기업규모']+\n","df['L환경']=(df['용수 사용량 등급']+df['에너지 총량 등급']+df['온실가스 배출총량 등급'])/df['기업규모']-df['녹색 기업 지정']-df['RE100']-df['sbti']-df['high_carbon'] # 낮은게좋은거,-df['high_carbon']\n","df['L사회']=df['N장애인고용률']+df['N남성 정규직 수']+df['N여성 정규직 수']+df['N여성 직원 수']-df['N남성 직원 수']+df['N배당수익률']-df['N유보율']"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":371},"executionInfo":{"elapsed":330,"status":"error","timestamp":1721094782650,"user":{"displayName":"노재민","userId":"10900486183626163831"},"user_tz":-540},"id":"azAVrvaqsDZw","outputId":"dbd24abc-7155-4670-d51d-c60cb7bf1a24"},"outputs":[{"ename":"AttributeError","evalue":"Can only use .cat accessor with a 'category' dtype","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-43-0dc2c938a77c>\u001b[0m in \u001b[0;36m<cell line: 12>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;31m# 지정된 컬럼들만 int로 변환\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mcol\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mcols_to_convert\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m     \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcat\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_categories\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfillna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   5987\u001b[0m         ):\n\u001b[1;32m   5988\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5989\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5990\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5991\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/accessor.py\u001b[0m in \u001b[0;36m__get__\u001b[0;34m(self, obj, cls)\u001b[0m\n\u001b[1;32m    222\u001b[0m             \u001b[0;31m# we're accessing the attribute of the class, i.e., Dataset.geo\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    223\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_accessor\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 224\u001b[0;31m         \u001b[0maccessor_obj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_accessor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    225\u001b[0m         \u001b[0;31m# Replace the property with the accessor object. Inspired by:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    226\u001b[0m         \u001b[0;31m# https://www.pydanny.com/cached-property.html\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/arrays/categorical.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data)\u001b[0m\n\u001b[1;32m   2443\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2444\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2445\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2446\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2447\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_index\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/arrays/categorical.py\u001b[0m in \u001b[0;36m_validate\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m   2452\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_validate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2453\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mis_categorical_dtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2454\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mAttributeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Can only use .cat accessor with a 'category' dtype\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2455\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2456\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_delegate_property_get\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: Can only use .cat accessor with a 'category' dtype"]}],"source":["# int로 변환할 컬럼 리스트\n","cols_to_convert = [\n","    'N시가총액', 'N매출액', 'N자산총계', 'N자본총계', 'N매출액_상승률',\n","    'N영업이익_상승률', 'N배당수익률_상승률', 'N영업이익률_상승률', 'N외국인 지분율',\n","    'N지배주주지분', '기업규모', '기업분류', '용수 사용량 등급', '에너지 총량 등급',\n","    '온실가스 배출총량 등급', '녹색 기업 지정', 'high_carbon', 'RE100', 'sbti',\n","    'N장애인고용률', 'N남성 정규직 수', 'N여성 정규직 수', 'N여성 직원 수',\n","    'N남성 직원 수', 'N배당수익률', 'N유보율'\n","]\n","\n","# 지정된 컬럼들만 int로 변환\n","for col in cols_to_convert:\n","    df[col] = df[col].cat.add_categories([0]).fillna(0).astype(int)\n","\n","\n","# 계산 수행\n","df['L재무구조'] = df['N시가총액'] + df['N매출액'] + df['N자산총계'] + df['N자본총계']\n","df['L성장성'] = df['N매출액_상승률'] + df['N영업이익_상승률'] + df['N배당수익률_상승률'] + df['N영업이익률_상승률']\n","df['L지배구조'] = df['N외국인 지분율'] + df['N지배주주지분'] + df['기업규모'] + df['기업분류']\n","df['L환경'] = df['용수 사용량 등급'] + df['에너지 총량 등급'] + df['온실가스 배출총량 등급'] - df['녹색 기업 지정'] - df['high_carbon'] - df['RE100'] - df['sbti']\n","df['L사회'] = df['N장애인고용률'] + df['N남성 정규직 수'] + df['N여성 정규직 수'] + df['N여성 직원 수'] - df['N남성 직원 수'] + df['N배당수익률'] - df['N유보율']\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":371},"executionInfo":{"elapsed":304,"status":"error","timestamp":1721094828037,"user":{"displayName":"노재민","userId":"10900486183626163831"},"user_tz":-540},"id":"xJv3R2M5-6ys","outputId":"af912afd-48ee-4249-9866-7c3a7550e305"},"outputs":[{"ename":"TypeError","evalue":"Cannot setitem on a Categorical with a new category (0), set the categories first","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-47-8a5153a88c01>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Categorical 타입인 컬럼들만 선택\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mcategorical_cols\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mselect_dtypes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minclude\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'category'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfillna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;31m# NaN 값을 0으로 채우고 int로 변환\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mcol\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mcategorical_cols\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mfillna\u001b[0;34m(self, value, method, axis, inplace, limit, downcast)\u001b[0m\n\u001b[1;32m   5491\u001b[0m         \u001b[0mdowncast\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mdict\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5492\u001b[0m     ) -> DataFrame | None:\n\u001b[0;32m-> 5493\u001b[0;31m         return super().fillna(\n\u001b[0m\u001b[1;32m   5494\u001b[0m             \u001b[0mvalue\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5495\u001b[0m             \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mfillna\u001b[0;34m(self, value, method, axis, inplace, limit, downcast)\u001b[0m\n\u001b[1;32m   6981\u001b[0m                     \u001b[0mnew_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6982\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6983\u001b[0;31m                     new_data = self._mgr.fillna(\n\u001b[0m\u001b[1;32m   6984\u001b[0m                         \u001b[0mvalue\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlimit\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlimit\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minplace\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdowncast\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdowncast\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6985\u001b[0m                     )\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36mfillna\u001b[0;34m(self, value, limit, inplace, downcast)\u001b[0m\n\u001b[1;32m    431\u001b[0m             \u001b[0mlimit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlibalgos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalidate_limit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlimit\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlimit\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    432\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 433\u001b[0;31m         return self.apply(\n\u001b[0m\u001b[1;32m    434\u001b[0m             \u001b[0;34m\"fillna\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    435\u001b[0m             \u001b[0mvalue\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36mapply\u001b[0;34m(self, f, align_keys, **kwargs)\u001b[0m\n\u001b[1;32m    350\u001b[0m                 \u001b[0mapplied\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    351\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 352\u001b[0;31m                 \u001b[0mapplied\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    353\u001b[0m             \u001b[0mresult_blocks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mextend_blocks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mapplied\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult_blocks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    354\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/blocks.py\u001b[0m in \u001b[0;36mfillna\u001b[0;34m(self, value, limit, inplace, downcast, using_cow)\u001b[0m\n\u001b[1;32m   1866\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1867\u001b[0m             \u001b[0mrefs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1868\u001b[0;31m             \u001b[0mnew_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfillna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlimit\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlimit\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1869\u001b[0m         \u001b[0mnb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmake_block_same_class\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_values\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrefs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrefs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1870\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mnb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_downcast\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnb\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdowncast\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0musing_cow\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0musing_cow\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/arrays/_mixins.py\u001b[0m in \u001b[0;36mfillna\u001b[0;34m(self, value, method, limit)\u001b[0m\n\u001b[1;32m    322\u001b[0m                 \u001b[0;31m# fill with value\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    323\u001b[0m                 \u001b[0mnew_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 324\u001b[0;31m                 \u001b[0mnew_values\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmask\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    325\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    326\u001b[0m             \u001b[0;31m# We validate the fill_value even if there is nothing to fill\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/arrays/_mixins.py\u001b[0m in \u001b[0;36m__setitem__\u001b[0;34m(self, key, value)\u001b[0m\n\u001b[1;32m    247\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setitem__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    248\u001b[0m         \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 249\u001b[0;31m         \u001b[0mvalue\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_setitem_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    250\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_ndarray\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    251\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/arrays/categorical.py\u001b[0m in \u001b[0;36m_validate_setitem_value\u001b[0;34m(self, value)\u001b[0m\n\u001b[1;32m   1295\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_listlike\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1296\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1297\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_scalar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1298\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1299\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_validate_scalar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfill_value\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/arrays/categorical.py\u001b[0m in \u001b[0;36m_validate_scalar\u001b[0;34m(self, fill_value)\u001b[0m\n\u001b[1;32m   1320\u001b[0m             \u001b[0mfill_value\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_unbox_scalar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfill_value\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1321\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1322\u001b[0;31m             raise TypeError(\n\u001b[0m\u001b[1;32m   1323\u001b[0m                 \u001b[0;34m\"Cannot setitem on a Categorical with a new \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1324\u001b[0m                 \u001b[0;34mf\"category ({fill_value}), set the categories first\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: Cannot setitem on a Categorical with a new category (0), set the categories first"]}],"source":["# Categorical 타입인 컬럼들만 선택\n","categorical_cols = df.select_dtypes(include=['category']).columns\n","df = df.fillna(0)\n","# NaN 값을 0으로 채우고 int로 변환\n","for col in categorical_cols:\n","    df[col] = df[col].cat.add_categories([0]).fillna(0).astype(int)\n","\n","# 계산 수행\n","df['L재무구조'] = df['N시가총액'] + df['N매출액'] + df['N자산총계'] + df['N자본총계']\n","df['L성장성'] = df['N매출액_상승률'] + df['N영업이익_상승률'] + df['N배당수익률_상승률'] + df['N영업이익률_상승률']\n","df['L지배구조'] = df['N외국인 지분율'] + df['N지배주주지분'] + df['기업규모'] + df['기업분류']\n","df['L환경'] = df['용수 사용량 등급'] + df['에너지 총량 등급'] + df['온실가스 배출총량 등급'] - df['녹색 기업 지정']  - df['RE100'] # - df['high_carbon']- df['sbti']\n","df['L사회'] = df['N장애인고용률'] + df['N남성 정규직 수'] + df['N여성 정규직 수'] + df['N여성 직원 수'] - df['N남성 직원 수'] + df['N배당수익률'] - df['N유보율']"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wWbh_GsRoXuA"},"outputs":[],"source":["df.to_excel('/content/drive/MyDrive/KDT/최종 프로젝트/제목없는 폴더9/0704_데이터_v003_지원한국제지대체2_최종3.xlsx')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LFxN3hDKPH2R"},"outputs":[],"source":["import pandas as pd\n","df=pd.read_excel('/content/drive/MyDrive/KDT/최종 프로젝트/제목없는 폴더9/0704_데이터_v003_지원한국제지대체2_최종3.xlsx')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Bhhq9Nr-PUlQ"},"outputs":[],"source":["# 중복된 행 제거\n","df_no_duplicates = df.drop_duplicates()\n","\n","# 중복된 특정 열을 기준으로 제거 (예: '스톡코드', 'year'를 기준으로 중복 제거)\n","df = df.drop_duplicates(subset=['stock_code', 'years'])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":319,"status":"ok","timestamp":1721116161096,"user":{"displayName":"노재민","userId":"10900486183626163831"},"user_tz":-540},"id":"UJMzxT0iRC4i","outputId":"f61a57f8-e301-433f-f266-fc38f932577f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["5"]},"metadata":{},"execution_count":155}],"source":["sum(df['회사명']=='한국제지')"]},{"cell_type":"code","source":["df['L환경'].isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RrGKu_mlYAsh","executionInfo":{"status":"ok","timestamp":1721117226914,"user_tz":-540,"elapsed":356,"user":{"displayName":"노재민","userId":"10900486183626163831"}},"outputId":"85ae13c5-1e26-4bc9-b06d-ee23aa55e081"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":172}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jCo5V6zrA36U"},"outputs":[],"source":["# 등급 구간 설정\n","percentiles = [0, 1.1,18.9,35.2, 49.6, 78.6, 100]\n","grades = ['A+', 'A', 'B+', 'B', 'C', 'D']\n","\n","# 각 퍼센트 범위에 따라 등급을 부여하는 함수\n","def assign_grade(rank):\n","    if rank <= percentiles[1]:\n","        return grades[0]\n","    elif rank <= percentiles[2]:\n","        return grades[1]\n","    elif rank <= percentiles[3]:\n","        return grades[2]\n","    elif rank <= percentiles[4]:\n","        return grades[3]\n","    elif rank <= percentiles[5]:\n","        return grades[4]\n","    else:\n","        return grades[5]\n","\n","# 각 과목별로 등급 부여\n","for subject in ['L사회','L환경', 'L지배구조', 'L성장성','L재무구조']:\n","    # # 중복된 행 제거\n","    # df_no_duplicates = df.drop_duplicates()\n","\n","    #     # 중복된 특정 열을 기준으로 제거 (예: '스톡코드', 'year'를 기준으로 중복 제거)\n","    # df = df.drop_duplicates(subset=['stock_code', 'years'])\n","    if subject == 'L환경':\n","        # 점수에 따라 오름차순 정렬 및 순위 계산 (낮은 점수가 좋은 등급)\n","        df = df.sort_values(by=subject, ascending=True).reset_index(drop=True)\n","    else:\n","        # 점수에 따라 내림차순 정렬 및 순위 계산 (높은 점수가 좋은 등급)\n","        df = df.sort_values(by=subject, ascending=False).reset_index(drop=True)\n","    df[f'{subject}_순위'] = (df.index + 1) / len(df) * 100\n","    # 등급 부여\n","    df[f'{subject}_등급'] = df[f'{subject}_순위'].apply(assign_grade)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":328,"status":"ok","timestamp":1721117239309,"user":{"displayName":"노재민","userId":"10900486183626163831"},"user_tz":-540},"id":"6WZGh73EI912","outputId":"f11cc7f6-f702-4cc4-b9d6-f29b87c8225c"},"outputs":[{"output_type":"stream","name":"stdout","text":["          index  years       회사명  stock_code 전년도ESG 종합등급      매출액  영업이익  \\\n","0    2019-12-01   2019      동화약품          20    NaN    B   3072.0    96   \n","1    2020-12-01   2020      동화약품          20      B    B   2721.0   232   \n","2    2021-12-01   2021      동화약품          20      B    C   2930.0   225   \n","3    2022-12-01   2022      동화약품          20      C    C   3404.0   299   \n","4    2023-12-01   2023      동화약품          20      C  NaN   3611.0   188   \n","...         ...    ...       ...         ...    ...  ...      ...   ...   \n","3978 2023-12-01   2023       F&F      383220     B+  NaN  19785.0  5518   \n","3979 2022-12-01   2022  에코프로에이치엔      383310    NaN    B   2182.0   414   \n","3980 2023-12-01   2023  에코프로에이치엔      383310      B  NaN   2289.0   418   \n","3981 2022-12-01   2022     LX홀딩스      383800    NaN   B+   2369.0  1589   \n","3982 2023-12-01   2023     LX홀딩스      383800     B+  NaN   1181.0   732   \n","\n","      영업이익(발표기준)  당기순이익  ...  L재무구조  L성장성     L지배구조   L환경   L사회  L사회_등급  \\\n","0             96     91  ...    NaN  1.12       NaN  3.45   NaN     NaN   \n","1            232    287  ...   2.11  1.82  1.303750  3.45  2.76      B+   \n","2            225    196  ...   2.11  1.65  1.337500  3.45  2.76      B+   \n","3            299    216  ...   2.00  2.34  1.418000  3.45  2.76      B+   \n","4            188    282  ...   2.00  1.25  1.597500  3.45  2.76     NaN   \n","...          ...    ...  ...    ...   ...       ...   ...   ...     ...   \n","3978        5518   4250  ...   2.95  2.21  1.552000  3.45  2.55     NaN   \n","3979         414    324  ...   1.66  1.12  1.395000  3.45  2.06     NaN   \n","3980         418    335  ...   1.66  1.94  1.395000  3.45  2.06     NaN   \n","3981        1589   1701  ...   2.08  1.12  1.487143  3.45  0.87     NaN   \n","3982         732    788  ...   1.64  0.73  1.677143  3.45  0.87     NaN   \n","\n","      L환경_등급  L지배구조_등급  L성장성_등급  L재무구조_등급  \n","0        NaN       NaN      NaN       NaN  \n","1          D         B        C         B  \n","2          C         B        C         B  \n","3          C        B+       B+         C  \n","4        NaN       NaN      NaN       NaN  \n","...      ...       ...      ...       ...  \n","3978     NaN       NaN      NaN       NaN  \n","3979     NaN       NaN      NaN       NaN  \n","3980     NaN       NaN      NaN       NaN  \n","3981     NaN       NaN      NaN       NaN  \n","3982     NaN       NaN      NaN       NaN  \n","\n","[3983 rows x 109 columns]\n"]}],"source":["import pandas as pd\n","import numpy as np\n","\n","\n","# 등급 구간 설정\n","percentiles = [0, 1.1,18.9,35.2, 49.6, 78.6, 100]\n","grades = ['A+', 'A', 'B+', 'B', 'C', 'D']\n","\n","# 각 퍼센트 범위에 따라 등급을 부여하는 함수\n","def assign_grade(rank):\n","    if rank <= percentiles[1]:\n","        return grades[0]\n","    elif rank <= percentiles[2]:\n","        return grades[1]\n","    elif rank <= percentiles[3]:\n","        return grades[2]\n","    elif rank <= percentiles[4]:\n","        return grades[3]\n","    elif rank <= percentiles[5]:\n","        return grades[4]\n","    else:\n","        return grades[5]\n","\n","# # 2019년 데이터를 제외한 데이터프레임 생성\n","# df_clean = df.dropna(subset=['전년도ESG'])\n","# df_filtered = df_clean[~df_clean['years'].isin([2019, 2023])].reset_index(drop=True)\n","\n","# 각 과목별로 등급 부여\n","for subject in ['L사회','L환경', 'L지배구조', 'L성장성','L재무구조']:\n","# 중복된 행 제거\n","    df_no_duplicates = df.drop_duplicates()\n","\n","# 중복된 특정 열을 기준으로 제거 (예: '스톡코드', 'year'를 기준으로 중복 제거)\n","    df = df.drop_duplicates(subset=['stock_code', 'years'])\n","    if subject == 'L환경':\n","        # 점수에 따라 오름차순 정렬 및 순위 계산 (낮은 점수가 좋은 등급)\n","        sorted_df = df_filtered.sort_values(by=subject, ascending=True).reset_index(drop=True)\n","    else:\n","        # 점수에 따라 내림차순 정렬 및 순위 계산 (높은 점수가 좋은 등급)\n","        sorted_df = df_filtered.sort_values(by=subject, ascending=False).reset_index(drop=True)\n","    sorted_df[f'{subject}_순위'] = (sorted_df.index + 1) / len(sorted_df) * 100\n","    # 등급 부여\n","    sorted_df[f'{subject}_등급'] = sorted_df[f'{subject}_순위'].apply(assign_grade)\n","\n","    # 원래 데이터프레임에 등급 추가 (2019년 제외하고 계산한 순위를 원래 df에 반영)\n","    df = df.merge(sorted_df[['stock_code', 'years', f'{subject}_등급']], on=['stock_code', 'years'], how='left')\n","\n","# 최종 데이터프레임 출력\n","print(df)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"11FqmiqnTnyo","outputId":"177af086-31cb-4ec0-bc97-f5c51f7b6896"},"outputs":[{"ename":"SyntaxError","evalue":"expected ':' (<ipython-input-63-7849b672dba9>, line 15)","output_type":"error","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-63-7849b672dba9>\"\u001b[0;36m, line \u001b[0;32m15\u001b[0m\n\u001b[0;31m    else\u001b[0m\n\u001b[0m        ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m expected ':'\n"]}],"source":["import pandas as pd\n","import numpy as np\n","\n","\n","# 등급 구간 설정\n","percentiles = [0, 0.3,0.7]\n","grades = ['우수', '보통', '미흡']\n","\n","# 각 퍼센트 범위에 따라 등급을 부여하는 함수\n","def assign_grade(rank):\n","    if rank <= percentiles[1]:\n","        return grades[0]\n","    elif rank <= percentiles[2]:\n","        return grades[1]\n","    else\n","        return grades[2]\n","\n","# 2019년 데이터를 제외한 데이터프레임 생성\n","df_filtered = df[df['years'] != 2019].reset_index(drop=True)\n","\n","# 각 과목별로 등급 부여\n","for subject in ['L사회','L환경', 'L지배구조', 'L성장성','L재무구조']:\n","# 중복된 행 제거\n","    df_no_duplicates = df.drop_duplicates()\n","\n","# 중복된 특정 열을 기준으로 제거 (예: '스톡코드', 'year'를 기준으로 중복 제거)\n","    df = df.drop_duplicates(subset=['stock_code', 'years'])\n","    if subject == 'L환경':\n","        # 점수에 따라 오름차순 정렬 및 순위 계산 (낮은 점수가 좋은 등급)\n","        sorted_df = df_filtered.sort_values(by=subject, ascending=True).reset_index(drop=True)\n","    else:\n","        # 점수에 따라 내림차순 정렬 및 순위 계산 (높은 점수가 좋은 등급)\n","        sorted_df = df_filtered.sort_values(by=subject, ascending=False).reset_index(drop=True)\n","    sorted_df[f'{subject}_순위'] = (sorted_df.index + 1) / len(sorted_df) * 100\n","    # 등급 부여\n","    sorted_df[f'{subject}_등급'] = sorted_df[f'{subject}_순위'].apply(assign_grade)\n","\n","    # 원래 데이터프레임에 등급 추가 (2019년 제외하고 계산한 순위를 원래 df에 반영)\n","    df = df.merge(sorted_df[['stock_code', 'years', f'{subject}_등급']], on=['stock_code', 'years'], how='left')\n","\n","# 최종 데이터프레임 출력\n","print(df)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lO7KoH7Ej5bj"},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","\n","# 등급 구간 설정\n","percentiles = [0, 1.1, 18.9, 35.2, 49.6, 78.6, 100]\n","grades = ['A+', 'A', 'B+', 'B', 'C', 'D']\n","\n","# 각 퍼센트 범위에 따라 등급을 부여하는 함수\n","def assign_grade(rank):\n","    if rank <= percentiles[1]:\n","        return grades[0]\n","    elif rank <= percentiles[2]:\n","        return grades[1]\n","    elif rank <= percentiles[3]:\n","        return grades[2]\n","    elif rank <= percentiles[4]:\n","        return grades[3]\n","    elif rank <= percentiles[5]:\n","        return grades[4]\n","    else:\n","        return grades[5]\n","\n","# 2019년 데이터를 제외한 데이터프레임 생성\n","df_filtered = df[df['years'] != 2019].reset_index(drop=True)\n","\n","# 각 과목별로 등급 부여\n","for subject in ['L사회', 'L환경', 'L지배구조', 'L성장성', 'L재무구조']:\n","    # 중복된 행 제거\n","    df_no_duplicates = df.drop_duplicates()\n","\n","    # 중복된 특정 열을 기준으로 제거 (예: 'stock_code', 'years'를 기준으로 중복 제거)\n","    df = df.drop_duplicates(subset=['stock_code', 'years'])\n","\n","    if subject == 'L환경':\n","        # 점수에 따라 오름차순 정렬 (낮은 점수가 좋은 등급)\n","        sorted_df = df_filtered.sort_values(by=subject, ascending=True).reset_index(drop=True)\n","    else:\n","        # 점수에 따라 내림차순 정렬 (높은 점수가 좋은 등급)\n","        sorted_df = df_filtered.sort_values(by=subject, ascending=False).reset_index(drop=True)\n","\n","    # 동일 점수에 대해 동일 순위 부여\n","    sorted_df[f'{subject}_순위'] = sorted_df[subject].rank(method='min', ascending=(subject == 'L환경'))\n","\n","    # 순위를 퍼센트로 변환\n","    sorted_df[f'{subject}_순위'] = sorted_df[f'{subject}_순위'] / len(sorted_df) * 100\n","\n","    # 등급 부여\n","    sorted_df[f'{subject}_등급'] = sorted_df[f'{subject}_순위'].apply(assign_grade)\n","\n","    # 원래 데이터프레임에 등급 추가 (2019년 제외하고 계산한 순위를 원래 df에 반영)\n","    df = df.merge(sorted_df[['stock_code', 'years', f'{subject}_등급']], on=['stock_code', 'years'], how='left')\n","\n","# 최종 데이터프레임 출력\n","print(df)\n"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":20722,"status":"ok","timestamp":1721201379409,"user":{"displayName":"노재민","userId":"10900486183626163831"},"user_tz":-540},"id":"yy9K_SvfanJb","outputId":"857e8391-0e68-45f2-d979-77abdb040ff9"},"outputs":[{"output_type":"stream","name":"stdout","text":["W: Skipping acquire of configured file 'main/source/Sources' as repository 'https://r2u.stat.illinois.edu/ubuntu jammy InRelease' does not seem to provide it (sources.list entry misspelt?)\n","Selecting previously unselected package fonts-nanum.\n","(Reading database ... 123586 files and directories currently installed.)\n","Preparing to unpack .../fonts-nanum_20200506-1_all.deb ...\n","Unpacking fonts-nanum (20200506-1) ...\n","Selecting previously unselected package fonts-nanum-coding.\n","Preparing to unpack .../fonts-nanum-coding_2.5-3_all.deb ...\n","Unpacking fonts-nanum-coding (2.5-3) ...\n","Selecting previously unselected package fonts-nanum-eco.\n","Preparing to unpack .../fonts-nanum-eco_1.000-7_all.deb ...\n","Unpacking fonts-nanum-eco (1.000-7) ...\n","Selecting previously unselected package fonts-nanum-extra.\n","Preparing to unpack .../fonts-nanum-extra_20200506-1_all.deb ...\n","Unpacking fonts-nanum-extra (20200506-1) ...\n","Setting up fonts-nanum-extra (20200506-1) ...\n","Setting up fonts-nanum (20200506-1) ...\n","Setting up fonts-nanum-coding (2.5-3) ...\n","Setting up fonts-nanum-eco (1.000-7) ...\n","Processing triggers for fontconfig (2.13.1-4.2ubuntu5) ...\n"]}],"source":["%matplotlib inline\n","\n","import matplotlib as mpl  # 기본 설정\n","import matplotlib.pyplot as plt  # 그래프 그리기\n","import matplotlib.font_manager as fm  # 폰트 관리\n","\n","\n","!apt-get update -qq         # apt-get 패키지 설치 명령어, -qq : 에러외 메세지 숨기기\n","!apt-get install fonts-nanum* -qq #나눔글꼴 설치\n","\n","fe = fm.FontEntry(fname=r'/usr/share/fonts/truetype/nanum/NanumGothic.ttf', name='NanumGothic') #파일 저장되어있는 경로와 이름 설정\n","fm.fontManager.ttflist.insert(0, fe)  # Matplotlib에 폰트 추가\n","plt.rcParams.update({'font.size': 10, 'font.family': 'NanumGothic'}) #폰트설정\n","mpl.rcParams['axes.unicode_minus'] = False"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":977},"executionInfo":{"elapsed":2864,"status":"ok","timestamp":1721117252106,"user":{"displayName":"노재민","userId":"10900486183626163831"},"user_tz":-540},"id":"CQRqWEhMZ6_i","outputId":"479c4070-9fe6-43d5-9a96-3ed926eec93c"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x1000 with 5 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","# 실제 데이터프레임을 사용하여 시각화\n","subjects = ['L사회', 'L환경', 'L지배구조', 'L성장성', 'L재무구조']\n","\n","plt.figure(figsize=(15, 10))\n","\n","for i, subject in enumerate(subjects, 1):\n","    plt.subplot(2, 3, i)\n","    sns.histplot(df[subject], bins=10, kde=True, stat=\"density\", common_norm=False)\n","    plt.title(f'{subject} Distribution')\n","\n","plt.tight_layout()\n","plt.show()\n"]},{"cell_type":"code","source":["df[['용수 사용량 등급','에너지 총량 등급','온실가스 배출총량 등급','녹색 기업 지정','high_carbon','RE100','sbti']].isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Bpm-wxArV1FB","executionInfo":{"status":"ok","timestamp":1721113457575,"user_tz":-540,"elapsed":340,"user":{"displayName":"노재민","userId":"10900486183626163831"}},"outputId":"9ff48f2d-a7b2-4442-9d97-a08b91456dee"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["용수 사용량 등급          0\n","에너지 총량 등급          0\n","온실가스 배출총량 등급       0\n","녹색 기업 지정           0\n","high_carbon        0\n","RE100           3876\n","sbti               0\n","dtype: int64"]},"metadata":{},"execution_count":127}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_Doh5iXYLx-N"},"outputs":[],"source":["df.to_excel('/content/drive/MyDrive/KDT/최종 프로젝트/제목없는 폴더11/비율따라나눈거10.xlsx',index=False)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":534,"status":"ok","timestamp":1720764280038,"user":{"displayName":"노재민","userId":"10900486183626163831"},"user_tz":-540},"id":"tfmQRBCK6836","outputId":"d2550eab-e002-4bf2-d8b8-6f11fb06861d"},"outputs":[{"name":"stdout","output_type":"stream","text":["0.989    9.0\n","0.811    7.0\n","0.648    6.0\n","0.504    5.0\n","0.214    3.0\n","Name: L사회, dtype: float64\n"]}],"source":["quart1 = df['L사회'].quantile([0.989,0.811,0.648, 0.504, 0.214])\n","print(quart1)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4,"status":"ok","timestamp":1720764283083,"user":{"displayName":"노재민","userId":"10900486183626163831"},"user_tz":-540},"id":"diGPEtP5ZZQq","outputId":"736c1fda-66ad-4364-84e9-1f644c5ab750"},"outputs":[{"name":"stdout","output_type":"stream","text":["환경\n","0.011   -1.039600\n","0.189    1.333333\n","0.352    3.000000\n","0.496    3.750000\n","0.786    5.000000\n","Name: L환경, dtype: float64\n"]}],"source":["\n","quart2 = df['L환경'].quantile([0.011,0.189,0.352, 0.496, 0.786])\n","\n","# 4 분위수 값을 출력\n","\n","print(f'환경\\n{quart2}')\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":315,"status":"ok","timestamp":1720764293877,"user":{"displayName":"노재민","userId":"10900486183626163831"},"user_tz":-540},"id":"-M6S1EVo71QZ","outputId":"7bb747d0-7743-4cd0-9a2d-a05b0dbb1e93"},"outputs":[{"name":"stdout","output_type":"stream","text":["0.989    12.0\n","0.811     8.0\n","0.648     7.0\n","0.504     6.0\n","0.214     4.0\n","Name: L지배구조, dtype: float64\n"]}],"source":["quart3 = df['L지배구조'].quantile([0.989,0.811,0.648, 0.504, 0.214])\n","print(quart3)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":294,"status":"ok","timestamp":1720764295993,"user":{"displayName":"노재민","userId":"10900486183626163831"},"user_tz":-540},"id":"AziwYq5X75vx","outputId":"ce42390e-abf0-45c6-e1da-5b61292ef824"},"outputs":[{"name":"stdout","output_type":"stream","text":["0.989    11.0\n","0.811    10.0\n","0.648     7.0\n","0.504     5.0\n","0.214     3.0\n","Name: L성장성, dtype: float64\n"]}],"source":["quart4 = df['L성장성'].quantile([0.989,0.811,0.648, 0.504, 0.214])\n","print(quart4)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":325,"status":"ok","timestamp":1720764297569,"user":{"displayName":"노재민","userId":"10900486183626163831"},"user_tz":-540},"id":"iWIuck7678x4","outputId":"d32fd8d8-183c-42cf-bc4a-0b86585e960e"},"outputs":[{"name":"stdout","output_type":"stream","text":["0.989    21.0\n","0.811    16.0\n","0.648    14.0\n","0.504    12.0\n","0.214     9.0\n","Name: L재무구조, dtype: float64\n"]}],"source":["quart5 = df['L재무구조'].quantile([0.989,0.811,0.648, 0.504, 0.214])\n","print(quart5)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UMPfomKW41NI"},"outputs":[],"source":["# 점수에 따른 등급 할당 함수\n","def assign_grade1(score):\n","    if score >= 9:\n","        return 'A+'\n","    elif score >= 7:\n","        return 'A'\n","    elif score >= 6:\n","        return 'B+'\n","    elif score >= 5:\n","        return 'B'\n","    elif score >= 3:\n","        return 'C'\n","    else:\n","        return 'D'\n","\n","# 사회 점수에 따라 등급 부여\n","df['L사회_등급'] = df['L사회'].apply(assign_grade1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Uss8onAG8SWL"},"outputs":[],"source":["def assign_grade2(score):\n","    if score <= -1.04:\n","        return 'A+'\n","    elif score <= 1.33:\n","        return 'A'\n","    elif score <= 3:\n","        return 'B'\n","    elif score <= 3.75:\n","        return 'C'\n","    elif score <= 5:\n","        return 'D'\n","    else:\n","        return 'F'\n","df['L환경_등급'] = df['L환경'].apply(assign_grade2)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"J_7G2Hua9MYR"},"outputs":[],"source":["# 점수에 따른 등급 할당 함수\n","def assign_grade3(score):\n","    if score >= 12:\n","        return 'A+'\n","    elif score >= 8:\n","        return 'A'\n","    elif score >= 7:\n","        return 'B+'\n","    elif score >= 6:\n","        return 'B'\n","    elif score >= 4:\n","        return 'C'\n","    else:\n","        return 'D'\n","\n","# 사회 점수에 따라 등급 부여\n","df['L지배구조_등급'] = df['L지배구조'].apply(assign_grade3)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_C5Gojb59M_x"},"outputs":[],"source":["# 점수에 따른 등급 할당 함수\n","def assign_grade4(score):\n","    if score >= 11:\n","        return 'A+'\n","    elif score >= 10:\n","        return 'A'\n","    elif score >= 7:\n","        return 'B+'\n","    elif score >= 5:\n","        return 'B'\n","    elif score >= 3:\n","        return 'C'\n","    else:\n","        return 'D'\n","\n","# 사회 점수에 따라 등급 부여\n","df['L성장성_등급'] = df['L성장성'].apply(assign_grade4)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zM5UvyJw9NVh"},"outputs":[],"source":["# 점수에 따른 등급 할당 함수\n","def assign_grade5(score):\n","    if score >= 21:\n","        return 'A+'\n","    elif score >= 16:\n","        return 'A'\n","    elif score >= 14:\n","        return 'B+'\n","    elif score >= 12:\n","        return 'B'\n","    elif score >= 9:\n","        return 'C'\n","    else:\n","        return 'D'\n","\n","# 사회 점수에 따라 등급 부여\n","df['L재무구조_등급'] = df['L재무구조'].apply(assign_grade5)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":298},"executionInfo":{"elapsed":320,"status":"error","timestamp":1720743987648,"user":{"displayName":"노재민","userId":"10900486183626163831"},"user_tz":-540},"id":"cmLf9eyaC4zk","outputId":"d901f417-a095-4c7e-d518-ee6849ddba01"},"outputs":[{"ename":"KeyError","evalue":"\"['L재무구조_순위', 'L성장성_순위', 'L지배구조_순위', 'L환경_순위', 'L사회_순위'] not found in axis\"","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-6-845da837e4bf>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'L재무구조_순위'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'L성장성_순위'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'L지배구조_순위'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'L환경_순위'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'L사회_순위'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   5256\u001b[0m                 \u001b[0mweight\u001b[0m  \u001b[0;36m1.0\u001b[0m     \u001b[0;36m0.8\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5257\u001b[0m         \"\"\"\n\u001b[0;32m-> 5258\u001b[0;31m         return super().drop(\n\u001b[0m\u001b[1;32m   5259\u001b[0m             \u001b[0mlabels\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5260\u001b[0m             \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   4547\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32min\u001b[0m \u001b[0maxes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4548\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4549\u001b[0;31m                 \u001b[0mobj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_drop_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4550\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4551\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m_drop_axis\u001b[0;34m(self, labels, axis, level, errors, only_slice)\u001b[0m\n\u001b[1;32m   4589\u001b[0m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4590\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4591\u001b[0;31m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4592\u001b[0m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_axis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4593\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, errors)\u001b[0m\n\u001b[1;32m   6697\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0many\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6698\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0merrors\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m\"ignore\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6699\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{list(labels[mask])} not found in axis\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6700\u001b[0m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m~\u001b[0m\u001b[0mmask\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6701\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdelete\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: \"['L재무구조_순위', 'L성장성_순위', 'L지배구조_순위', 'L환경_순위', 'L사회_순위'] not found in axis\""]}],"source":["df=df.drop(columns=['L재무구조_순위','L성장성_순위','L지배구조_순위','L환경_순위','L사회_순위'])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":298},"executionInfo":{"elapsed":996,"status":"error","timestamp":1720764388020,"user":{"displayName":"노재민","userId":"10900486183626163831"},"user_tz":-540},"id":"33vVQTlnFnN2","outputId":"54a90c7a-2be8-40d4-ffbc-a0c81e37aa33"},"outputs":[{"ename":"KeyError","evalue":"\"['Unnamed: 0'] not found in axis\"","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-18-cb9c66fdb8d3>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'Unnamed: 0'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   5256\u001b[0m                 \u001b[0mweight\u001b[0m  \u001b[0;36m1.0\u001b[0m     \u001b[0;36m0.8\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5257\u001b[0m         \"\"\"\n\u001b[0;32m-> 5258\u001b[0;31m         return super().drop(\n\u001b[0m\u001b[1;32m   5259\u001b[0m             \u001b[0mlabels\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5260\u001b[0m             \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   4547\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32min\u001b[0m \u001b[0maxes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4548\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4549\u001b[0;31m                 \u001b[0mobj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_drop_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4550\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4551\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m_drop_axis\u001b[0;34m(self, labels, axis, level, errors, only_slice)\u001b[0m\n\u001b[1;32m   4589\u001b[0m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4590\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4591\u001b[0;31m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4592\u001b[0m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_axis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4593\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, errors)\u001b[0m\n\u001b[1;32m   6697\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0many\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6698\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0merrors\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m\"ignore\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6699\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{list(labels[mask])} not found in axis\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6700\u001b[0m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m~\u001b[0m\u001b[0mmask\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6701\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdelete\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: \"['Unnamed: 0'] not found in axis\""]}],"source":["df=df.drop(columns='Unnamed: 0')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FcUvRynYDWp_"},"outputs":[],"source":["df.to_excel('/content/drive/MyDrive/KDT/최종 프로젝트/제목없는 폴더9/최종데이터_ESG수정2.xlsx',index=False)"]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","\n","# 상관관계 데이터 (여기서는 예시로 데이터프레임으로 변환)\n","data = {\n","    'column': ['target_ESG', 'N부채총계', 'N매출액', 'N자본총계', 'N지배주주지분', 'N자산총계', 'N시가총액', '지속가능경영 보고서공시여부',\n","                    'N사외이사 수', '사외이사 수', 'N직원 수', 'N남성 정규직 수', 'GICS_Industry_encoded', 'N남성 직원 수', '사외이사 비율_cluster',\n","                    'N여성 직원 수', 'N여성 정규직 수', 'sbti', '이사의 수', '외국인 지분율', '여성 평균 연봉', '총 임원 수', '매출액',\n","                    '사외이사 비율', '남성 평균 연봉', '부채총계', '자산총계', '자본금', '여성 임원 수', '매출액_cluster', 'DPS(원)', '비지배주주지분',\n","                    '녹색 기업 지정', '총 평균급여', '유보율', '자본총계', '직원 수', '장애인근로자수_cluster', '남성 직원 수', '여성 직원 수',\n","                    '남성 정규직 수', '여성 정규직 수', 'RE100', '지배주주지분', '총임원수변화율_abs', '비지배주주순이익', 'GICS_Sector_encoded',\n","                    '지배주주지분가치', '여성 평균 연봉_cluster', '영업이익(발표기준)', '영업이익', '여성 임원 비율_cluster', '시가총액', '배당수익률',\n","                    '여성 임원 비율', '당기순이익', 'BPS(원)', 'EPS(원)', '지배주주순이익', '여성 직원 비율_cluster', '시가총액_유보율', '남성 평균 연봉_cluster',\n","                    'ROA', '발행주식수', '총임원수변화율', '상장주식수', '비지배주주이익', 'ROE', '시가총액_배당수익률', '여성 직원 비율', '외국인 보유수량',\n","                    '영업이익률', '남성 직원 비율_cluster', 'wage_increase_percentage', '영업이익_상승률', '지배주주이익', '지배주주순이익률', '배당수익률_상승률',\n","                    '여성 정규직 비율_cluster', '부채비율', '총 주가변화율', '효율성지표', '총 외국인 보유수량변화율', '총 부채총계변화율', '남성 정규직 비율',\n","                    '총 PBR변화율', '정규직비율', '매출액_상승률(퍼센트)', '남성 정규직 비율_cluster', '조직의변화율', '총직원수변화율', 'index', '영업이익률_상승률',\n","                    'PBR', '총 자본총계변화율', '총 시가총액변화율', '여성 정규직 비율', '총 외국인 지분율변화율', '총 평균급여변화율', 'high_carbon', '남성 직원 비율',\n","                    '장애인고용률_cluster', '자본비율', '총 여성 임원 수변화율', '온실가스 배출총량 등급', '용수 사용량 등급', '에너지 총량 등급', '환경지표', '기업분류'],\n","    'correlation': [0.772264, 0.598767, 0.598326, 0.594607, 0.592873, 0.582386, 0.580901, 0.560634, 0.514758, 0.513269, 0.430334, 0.423220, 0.419456,\n","                    0.411256, 0.409185, 0.389040, 0.382901, 0.366629, 0.365118, 0.354995, 0.307153, 0.301724, 0.295827, 0.271616, 0.267657, 0.264856,\n","                    0.261137, 0.261000, 0.256956, 0.242506, 0.230855, 0.230734, 0.228485, 0.223490, 0.223425, 0.211481, 0.206975, 0.206722, 0.202479,\n","                    0.202351, 0.197781, 0.193643, 0.186957, 0.186563, 0.176209, 0.175486, 0.173358, 0.172969, 0.165615, 0.161514, 0.161436, 0.158055,\n","                    0.157315, 0.151023, 0.140516, 0.140105, 0.133165, 0.130919, 0.130079, 0.128908, 0.127773, 0.123548, 0.120517, 0.112903, 0.110399,\n","                    0.109987, 0.105083, 0.104014, 0.100758, 0.096386, 0.093895, 0.092684, 0.088515, 0.081930, 0.064704, 0.060672, 0.058502, 0.054722,\n","                    0.035321, 0.035207, 0.028561, 0.026006, 0.023028, 0.022837, 0.022830, 0.018202, 0.017031, 0.012194, 0.006208, 0.001336, 0.001047,\n","                    -0.001756, -0.004003, -0.013579, -0.014079, -0.016716, -0.031543, -0.055760, -0.065580, -0.089384, -0.091616, -0.106428, -0.128567,\n","                    -0.161057, -0.319907, -0.392080, -0.398881, -0.401187, -0.487831]\n","}\n","\n","correlation_df = pd.DataFrame(data)\n","\n","# 외부 데이터프레임 로드\n","external_df = pd.read_excel('/content/drive/MyDrive/KDT/최종 프로젝트/제목없는 폴더7/전처리한데이터 (1).xlsx')\n","\n","# 중분류 정의\n","categories = {\n","    'E': ['녹색 기업 지정', '온실가스 배출총량 등급', '용수 사용량 등급', '에너지 총량 등급', '환경지표','sbti', 'RE100', '지속가능경영 보고서공시여부'],\n","    'S': ['N직원 수', 'N남성 정규직 수', 'N남성 직원 수', 'N여성 직원 수', 'N여성 정규직 수', '여성 평균 연봉', '총 평균급여',\n","          '남성 평균 연봉', '직원 수', '남성 직원 수', '여성 직원 수', '남성 정규직 수', '여성 정규직 수', '여성 임원 수 ',\n","          '여성 평균 연봉_cluster', '여성 임원 비율_cluster','총 여성 임원 수변화율', '여성 직원 비율_cluster', '여성 직원 비율', '남성 평균 연봉_cluster',\n","          '여성 정규직 비율_cluster', '남성 직원 비율_cluster', '남성 정규직 비율', '남성 정규직 비율_cluster', '장애인근로자수_cluster',\n","          '장애인고용률_cluster','조직의변화율'],\n","    'G': ['N사외이사 수', '사외이사 수', '사외이사 비율_cluster',  '이사의 수', '사외이사 비율', '총임원수변화율_abs',\n","              '외국인 지분율','총임원수변화율', '총 외국인 보유수량변화율', '총 임원 수','외국인 보유수량'],\n","    '재무': ['N부채총계', 'N매출액', 'N자본총계', 'N지배주주지분', 'N자산총계', 'N시가총액', '부채총계', '자산총계', '자본금', '매출액',\n","             '시가총액', 'BPS(원)', 'EPS(원)', 'DPS(원)', '자본총계', '지배주주지분', '비지배주주지분', 'ROA', 'ROE', '당기순이익',\n","             '영업이익(발표기준)', '영업이익', '영업이익률', '배당수익률', '발행주식수', '상장주식수', 'PBR',  '유보율',\n","              '비지배주주순이익', '비지배주주이익', '지배주주순이익', '지배주주이익', '지배주주순이익률', '자본비율'],\n","    '성장성': ['매출액_cluster', '매출액_상승률(퍼센트)', '영업이익_상승률', '배당수익률_상승률', '총 PBR변화율', '총 자본총계변화율',\n","          '총 시가총액변화율', '총 평균급여변화율',  '총 주가변화율',\n","          '효율성지표',  '총직원수변화율']\n","}\n","\n","# 각 컬럼을 중분류로 매핑\n","def get_category(col):\n","    for category, columns in categories.items():\n","        if col in columns:\n","            return category\n","    return None\n","\n","correlation_df['category'] = correlation_df['column'].apply(get_category)\n","\n","# 등급을 4단계로 나누기 위한 기준 정의 (예: 사분위수)\n","def assign_grade(value, quartiles):\n","    if value >= quartiles[0.989]:\n","        return 4\n","    elif value >= quartiles[0.811]:\n","        return 3\n","    elif value >= quartiles[0.648]:\n","        return 2\n","    else:\n","        return 1\n","\n","# 각 중분류별로 등급을 할당\n","grades = {}\n","for category in categories.keys():\n","    category_data = correlation_df[correlation_df['category'] == category]['correlation']\n","    quartiles = category_data.quantile([0.648, 0.811, 0.989])\n","    grades[category] = category_data.apply(assign_grade, args=(quartiles,)).to_dict()\n","\n","# 외부 데이터프레임에 중분류별 등급 컬럼 추가\n","for category in categories.keys():\n","    cols_in_category = correlation_df[correlation_df['category'] == category]['column']\n","    external_df[f'{category}_grade'] = external_df[cols_in_category].apply(lambda row: np.mean([grades[category].get(col) for col in row.index if col in grades[category]]), axis=1)\n","\n","\n","\n","# 결과 출력\n","print(external_df.head())\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KL8dhL0t4Nxh","executionInfo":{"status":"ok","timestamp":1721201829551,"user_tz":-540,"elapsed":5849,"user":{"displayName":"노재민","userId":"10900486183626163831"}},"outputId":"f204437f-524f-489b-844d-0eb9439c65cb"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/numpy/core/fromnumeric.py:3504: RuntimeWarning: Mean of empty slice.\n","  return _methods._mean(a, axis=axis, dtype=dtype,\n","/usr/local/lib/python3.10/dist-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide\n","  ret = ret.dtype.type(ret / rcount)\n","/usr/local/lib/python3.10/dist-packages/numpy/core/fromnumeric.py:3504: RuntimeWarning: Mean of empty slice.\n","  return _methods._mean(a, axis=axis, dtype=dtype,\n","/usr/local/lib/python3.10/dist-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide\n","  ret = ret.dtype.type(ret / rcount)\n","/usr/local/lib/python3.10/dist-packages/numpy/core/fromnumeric.py:3504: RuntimeWarning: Mean of empty slice.\n","  return _methods._mean(a, axis=axis, dtype=dtype,\n","/usr/local/lib/python3.10/dist-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide\n","  ret = ret.dtype.type(ret / rcount)\n","/usr/local/lib/python3.10/dist-packages/numpy/core/fromnumeric.py:3504: RuntimeWarning: Mean of empty slice.\n","  return _methods._mean(a, axis=axis, dtype=dtype,\n","/usr/local/lib/python3.10/dist-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide\n","  ret = ret.dtype.type(ret / rcount)\n","/usr/local/lib/python3.10/dist-packages/numpy/core/fromnumeric.py:3504: RuntimeWarning: Mean of empty slice.\n","  return _methods._mean(a, axis=axis, dtype=dtype,\n","/usr/local/lib/python3.10/dist-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide\n","  ret = ret.dtype.type(ret / rcount)\n"]},{"output_type":"stream","name":"stdout","text":["       index  종합등급      자산총계  녹색 기업 지정       매출액      영업이익  영업이익(발표기준)  \\\n","0 2020-12-01     0  0.000921         0  0.000893  0.102117    0.102117   \n","1 2021-12-01     0  0.000952         0  0.000962  0.102104    0.102104   \n","2 2022-12-01     0  0.000982         0  0.001119  0.102233    0.102233   \n","3 2020-12-01     0  0.000302         0  0.000382  0.101734    0.101734   \n","4 2021-12-01     0  0.000329         0  0.000434  0.101666    0.101666   \n","\n","      당기순이익   지배주주순이익  비지배주주순이익  ...  여성 평균 연봉_cluster  남성 정규직 비율_cluster  \\\n","0  0.086156  0.088832         2  ...                 0                  0   \n","1  0.086007  0.088656        17  ...                 0                  0   \n","2  0.086040  0.088697        12  ...                 0                  0   \n","3  0.085496  0.088223       -34  ...                 0                  0   \n","4  0.085489  0.088199       -25  ...                 0                  0   \n","\n","   여성 정규직 비율_cluster  장애인고용률_cluster  장애인근로자수_cluster  E_grade  S_grade  \\\n","0                  1               0                0      NaN      NaN   \n","1                  1               0                0      NaN      NaN   \n","2                  1               0                0      NaN      NaN   \n","3                  1               0                0      NaN      NaN   \n","4                  1               0                0      NaN      NaN   \n","\n","   G_grade  재무_grade  성장성_grade  \n","0      NaN       NaN        NaN  \n","1      NaN       NaN        NaN  \n","2      NaN       NaN        NaN  \n","3      NaN       NaN        NaN  \n","4      NaN       NaN        NaN  \n","\n","[5 rows x 115 columns]\n"]}]},{"cell_type":"code","source":["df=external_df"],"metadata":{"id":"K9RWHl_CnbxJ","executionInfo":{"status":"ok","timestamp":1721201709841,"user_tz":-540,"elapsed":324,"user":{"displayName":"노재민","userId":"10900486183626163831"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["# 등급을 나누는 기준 퍼센트\n","percentiles = [1.1, 18.9, 35.2, 49.6, 78.6]\n","\n","# 등급 레이블\n","grades = ['a+', 'a', 'b+', 'b', 'c', 'd']\n","\n","def assign_grade(series, percentiles, grades):\n","    # 값을 등급화할 때 동점자가 있을 경우 동일한 등급을 받도록 함\n","    rank_series = series.rank(method='min', pct=True) * 100\n","    bins = [0] + percentiles + [100]\n","    return pd.cut(rank_series, bins=bins, labels=grades, include_lowest=True)\n","\n","# 각 컬럼에 등급을 매기기\n","grade_columns = {}\n","for column in df.columns:\n","    grade_columns[column + '_등급'] = assign_grade(df[column], percentiles, grades)\n","\n","# 새 컬럼들을 데이터프레임에 한 번에 추가\n","df = pd.concat([df, pd.DataFrame(grade_columns)], axis=1)"],"metadata":{"id":"7rBCVO77nYyr","executionInfo":{"status":"ok","timestamp":1721201761992,"user_tz":-540,"elapsed":1498,"user":{"displayName":"노재민","userId":"10900486183626163831"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["df.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dOeZ-HCdnqmy","executionInfo":{"status":"ok","timestamp":1721203226514,"user_tz":-540,"elapsed":307,"user":{"displayName":"노재민","userId":"10900486183626163831"}},"outputId":"cd748e39-5865-414d-c108-f2e0835572df"},"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(2871, 132)"]},"metadata":{},"execution_count":31}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from sklearn.preprocessing import MinMaxScaler\n","# 상관관계 데이터 (여기서는 예시로 데이터프레임으로 변환)\n","data = {\n","    'column': ['target_ESG', 'N부채총계', 'N매출액', 'N자본총계', 'N지배주주지분', 'N자산총계', 'N시가총액', '지속가능경영 보고서공시여부',\n","                    'N사외이사 수', '사외이사 수', 'N직원 수', 'N남성 정규직 수', 'GICS_Industry_encoded', 'N남성 직원 수', '사외이사 비율_cluster',\n","                    'N여성 직원 수', 'N여성 정규직 수', 'sbti', '이사의 수', '외국인 지분율', '여성 평균 연봉', '총 임원 수', '매출액',\n","                    '사외이사 비율', '남성 평균 연봉', '부채총계', '자산총계', '자본금', '여성 임원 수', '매출액_cluster', 'DPS(원)', '비지배주주지분',\n","                    '녹색 기업 지정', '총 평균급여', '유보율', '자본총계', '직원 수', '장애인근로자수_cluster', '남성 직원 수', '여성 직원 수',\n","                    '남성 정규직 수', '여성 정규직 수', 'RE100', '지배주주지분', '총임원수변화율_abs', '비지배주주순이익', 'GICS_Sector_encoded',\n","                    '지배주주지분가치', '여성 평균 연봉_cluster', '영업이익(발표기준)', '영업이익', '여성 임원 비율_cluster', '시가총액', '배당수익률',\n","                    '여성 임원 비율', '당기순이익', 'BPS(원)', 'EPS(원)', '지배주주순이익', '여성 직원 비율_cluster', '시가총액_유보율', '남성 평균 연봉_cluster',\n","                    'ROA', '발행주식수', '총임원수변화율', '상장주식수', '비지배주주이익', 'ROE', '시가총액_배당수익률', '여성 직원 비율', '외국인 보유수량',\n","                    '영업이익률', '남성 직원 비율_cluster', 'wage_increase_percentage', '영업이익_상승률', '지배주주이익', '지배주주순이익률', '배당수익률_상승률',\n","                    '여성 정규직 비율_cluster', '부채비율', '총 주가변화율', '효율성지표', '총 외국인 보유수량변화율', '총 부채총계변화율', '남성 정규직 비율',\n","                    '총 PBR변화율', '정규직비율', '매출액_상승률(퍼센트)', '남성 정규직 비율_cluster', '조직의변화율', '총직원수변화율', 'index', '영업이익률_상승률',\n","                    'PBR', '총 자본총계변화율', '총 시가총액변화율', '여성 정규직 비율', '총 외국인 지분율변화율', '총 평균급여변화율', 'high_carbon', '남성 직원 비율',\n","                    '장애인고용률_cluster', '자본비율', '총 여성 임원 수변화율', '온실가스 배출총량 등급', '용수 사용량 등급', '에너지 총량 등급', '환경지표', '기업분류'],\n","    'correlation': [0.772264, 0.598767, 0.598326, 0.594607, 0.592873, 0.582386, 0.580901, 0.560634, 0.514758, 0.513269, 0.430334, 0.423220, 0.419456,\n","                    0.411256, 0.409185, 0.389040, 0.382901, 0.366629, 0.365118, 0.354995, 0.307153, 0.301724, 0.295827, 0.271616, 0.267657, 0.264856,\n","                    0.261137, 0.261000, 0.256956, 0.242506, 0.230855, 0.230734, 0.228485, 0.223490, 0.223425, 0.211481, 0.206975, 0.206722, 0.202479,\n","                    0.202351, 0.197781, 0.193643, 0.186957, 0.186563, 0.176209, 0.175486, 0.173358, 0.172969, 0.165615, 0.161514, 0.161436, 0.158055,\n","                    0.157315, 0.151023, 0.140516, 0.140105, 0.133165, 0.130919, 0.130079, 0.128908, 0.127773, 0.123548, 0.120517, 0.112903, 0.110399,\n","                    0.109987, 0.105083, 0.104014, 0.100758, 0.096386, 0.093895, 0.092684, 0.088515, 0.081930, 0.064704, 0.060672, 0.058502, 0.054722,\n","                    0.035321, 0.035207, 0.028561, 0.026006, 0.023028, 0.022837, 0.022830, 0.018202, 0.017031, 0.012194, 0.006208, 0.001336, 0.001047,\n","                    -0.001756, -0.004003, -0.013579, -0.014079, -0.016716, -0.031543, -0.055760, -0.065580, -0.089384, -0.091616, -0.106428, -0.128567,\n","                    -0.161057, -0.319907, -0.392080, -0.398881, -0.401187, -0.487831]\n","}\n","\n","correlation_df = pd.DataFrame(data)\n","\n","# 외부 데이터프레임 로드\n","external_df = pd.read_excel('/content/drive/MyDrive/KDT/최종 프로젝트/제목없는 폴더9/전처리한데이터_점수기입_회사명(O)수정태완2.xlsx')\n","# Min-Max 스케일러 초기화\n","scaler = MinMaxScaler()\n","\n","# 수치형 컬럼만 선택하여 스케일링\n","numeric_columns = external_df.select_dtypes(include=['float64', 'int64']).columns\n","external_df[numeric_columns] = scaler.fit_transform(external_df[numeric_columns])\n","\n","print(\"스케일링된 데이터프레임:\\n\", external_df)\n","# 중분류 정의\n","categories = {\n","    'E': ['녹색 기업 지정', '온실가스 배출총량 등급', '용수 사용량 등급', '에너지 총량 등급', '환경지표', 'sbti', 'RE100', '지속가능경영 보고서공시여부'],\n","    'S': ['N직원 수', 'N남성 정규직 수', 'N남성 직원 수', 'N여성 직원 수', 'N여성 정규직 수', '여성 평균 연봉', '총 평균급여',\n","          '남성 평균 연봉', '직원 수', '남성 직원 수', '여성 직원 수', '남성 정규직 수', '여성 정규직 수', '여성 임원 수',\n","          '여성 평균 연봉_cluster', '여성 임원 비율_cluster', '총 여성 임원 수변화율', '여성 직원 비율_cluster', '여성 직원 비율', '남성 평균 연봉_cluster',\n","          '여성 정규직 비율_cluster', '남성 직원 비율_cluster', '남성 정규직 비율', '남성 정규직 비율_cluster', '장애인근로자수_cluster',\n","          '장애인고용률_cluster', '조직의변화율'],\n","    'G': ['N사외이사 수', '사외이사 수', '사외이사 비율_cluster', '이사의 수', '사외이사 비율', '총임원수변화율_abs',\n","          '외국인 지분율', '총임원수변화율', '총 외국인 보유수량변화율', '총 임원 수', '외국인 보유수량'],\n","    '재무': ['N부채총계', 'N매출액', 'N자본총계', 'N지배주주지분', 'N자산총계', 'N시가총액', '부채총계', '자산총계', '자본금', '매출액',\n","             '시가총액', 'BPS(원)', 'EPS(원)', 'DPS(원)', '자본총계', '지배주주지분', '비지배주주지분', 'ROA', 'ROE', '당기순이익',\n","             '영업이익(발표기준)', '영업이익', '영업이익률', '배당수익률', '발행주식수', '상장주식수', 'PBR', '유보율',\n","             '비지배주주순이익', '비지배주주이익', '지배주주순이익', '지배주주이익', '지배주주순이익률', '자본비율'],\n","    '성장성': ['매출액_cluster', '매출액_상승률(퍼센트)', '영업이익_상승률', '배당수익률_상승률', '총 PBR변화율', '총 자본총계변화율',\n","             '총 시가총액변화율', '총 평균급여변화율', '총 주가변화율',\n","             '효율성지표', '총직원수변화율']\n","}\n","\n","# 중분류별로 값을 상관관계 계수와 곱한 후 합산하여 새로운 컬럼 추가\n","for category, columns in categories.items():\n","    # 해당 중분류의 컬럼이 external_df에 존재하는 경우에만 처리\n","    common_columns = [col for col in columns if col in external_df.columns]\n","\n","    if common_columns:\n","        # 상관관계 계수와 매핑\n","        correlation_dict = correlation_df.set_index('column')['correlation'].to_dict()\n","        external_df[f'{category}_value'] = external_df[common_columns].apply(\n","            lambda row: sum(row[col] * correlation_dict[col] for col in common_columns if col in correlation_dict),\n","            axis=1\n","        )\n","\n","# 결과 출력\n","print(external_df.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"R5HptmUfTAn9","executionInfo":{"status":"ok","timestamp":1721203402321,"user_tz":-540,"elapsed":7564,"user":{"displayName":"노재민","userId":"10900486183626163831"}},"outputId":"3c51e382-f2c0-499a-9832-f61ab1f972e7"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["스케일링된 데이터프레임:\n","          index      종합등급       회사명  stock_code      자산총계  녹색 기업 지정       매출액  \\\n","0     0.143192  0.000000      동화약품    0.000000  0.000906       0.0  0.000893   \n","1     0.428795  0.000000      동화약품    0.000000  0.000937       0.0  0.000962   \n","2     0.714397  0.000000      동화약품    0.000000  0.000966       0.0  0.001119   \n","3     1.000000  0.000000      동화약품    0.000000  0.001194       0.0  0.001188   \n","4     0.143192  0.000000     KR모터스    0.000052  0.000297       0.0  0.000382   \n","...        ...       ...       ...         ...       ...       ...       ...   \n","2866  1.000000  0.000000       디어유    0.980458  0.000373       0.0  0.000243   \n","2867  1.000000  0.000000    화승알앤에이    0.987102  0.000900       0.0  0.002245   \n","2868  1.000000  0.333333       F&F    0.998489  0.004353       0.0  0.006539   \n","2869  1.000000  0.000000  에코프로에이치엔    0.998723  0.000450       0.0  0.000750   \n","2870  1.000000  0.666667     LX홀딩스    1.000000  0.003680       0.0  0.000383   \n","\n","          영업이익  영업이익(발표기준)     당기순이익  ...  남성 직원 비율_cluster  여성 직원 비율_cluster  \\\n","0     0.130609    0.130609  0.141472  ...               0.5               1.0   \n","1     0.130597    0.130597  0.141332  ...               0.5               1.0   \n","2     0.130722    0.130722  0.141362  ...               0.5               1.0   \n","3     0.130535    0.130535  0.141464  ...               0.0               1.0   \n","4     0.130238    0.130238  0.140852  ...               0.0               0.0   \n","...        ...         ...       ...  ...               ...               ...   \n","2866  0.130700    0.130700  0.141433  ...               1.0               0.0   \n","2867  0.130754    0.130754  0.141403  ...               0.5               0.5   \n","2868  0.139513    0.139513  0.147589  ...               1.0               0.0   \n","2869  0.130922    0.130922  0.141546  ...               0.5               0.5   \n","2870  0.131451    0.131451  0.142245  ...               0.5               0.5   \n","\n","      사외이사 비율_cluster  여성 임원 비율_cluster  남성 평균 연봉_cluster  여성 평균 연봉_cluster  \\\n","0                 0.0               1.0               0.0               0.0   \n","1                 0.5               1.0               0.0               0.0   \n","2                 0.5               1.0               0.0               0.0   \n","3                 0.5               0.5               0.0               0.0   \n","4                 0.5               0.0               0.0               0.0   \n","...               ...               ...               ...               ...   \n","2866              1.0               0.5               1.0               0.0   \n","2867              1.0               0.0               0.0               0.0   \n","2868              1.0               0.5               0.0               0.0   \n","2869              0.5               0.0               1.0               0.0   \n","2870              0.5               0.0               1.0               0.0   \n","\n","      남성 정규직 비율_cluster  여성 정규직 비율_cluster  장애인고용률_cluster  장애인근로자수_cluster  \n","0                   0.0                0.5             0.0              0.0  \n","1                   0.0                0.5             0.0              0.0  \n","2                   0.0                0.5             0.0              0.0  \n","3                   0.0                0.0             0.0              1.0  \n","4                   0.0                0.5             0.0              0.0  \n","...                 ...                ...             ...              ...  \n","2866                0.0                0.0             0.0              1.0  \n","2867                0.0                0.0             0.0              1.0  \n","2868                0.0                0.0             0.0              1.0  \n","2869                0.0                0.0             0.0              1.0  \n","2870                0.0                0.0             0.0              1.0  \n","\n","[2871 rows x 112 columns]\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-39-6a2a8cf8bfd8>:70: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  external_df[f'{category}_value'] = external_df[common_columns].apply(\n","<ipython-input-39-6a2a8cf8bfd8>:70: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  external_df[f'{category}_value'] = external_df[common_columns].apply(\n","<ipython-input-39-6a2a8cf8bfd8>:70: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  external_df[f'{category}_value'] = external_df[common_columns].apply(\n"]},{"output_type":"stream","name":"stdout","text":["      index  종합등급    회사명  stock_code      자산총계  녹색 기업 지정       매출액      영업이익  \\\n","0  0.143192   0.0   동화약품    0.000000  0.000906       0.0  0.000893  0.130609   \n","1  0.428795   0.0   동화약품    0.000000  0.000937       0.0  0.000962  0.130597   \n","2  0.714397   0.0   동화약품    0.000000  0.000966       0.0  0.001119  0.130722   \n","3  1.000000   0.0   동화약품    0.000000  0.001194       0.0  0.001188  0.130535   \n","4  0.143192   0.0  KR모터스    0.000052  0.000297       0.0  0.000382  0.130238   \n","\n","   영업이익(발표기준)     당기순이익  ...  여성 평균 연봉_cluster  남성 정규직 비율_cluster  \\\n","0    0.130609  0.141472  ...               0.0                0.0   \n","1    0.130597  0.141332  ...               0.0                0.0   \n","2    0.130722  0.141362  ...               0.0                0.0   \n","3    0.130535  0.141464  ...               0.0                0.0   \n","4    0.130238  0.140852  ...               0.0                0.0   \n","\n","   여성 정규직 비율_cluster  장애인고용률_cluster  장애인근로자수_cluster   E_value   S_value  \\\n","0                0.5             0.0              0.0 -1.512055  1.907624   \n","1                0.5             0.0              0.0 -1.512055  1.917345   \n","2                0.5             0.0              0.0 -1.512055  1.914746   \n","3                0.0             0.0              1.0 -1.512055  1.982998   \n","4                0.5             0.0              0.0 -1.512055 -0.088401   \n","\n","    G_value  재무_value  성장성_value  \n","0  0.762864  1.808601   0.028586  \n","1  0.884211  1.606126   0.028232  \n","2  0.906279  1.414489   0.028533  \n","3  0.888667  1.627199   0.028333  \n","4  0.524622  0.717459   0.028125  \n","\n","[5 rows x 117 columns]\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-39-6a2a8cf8bfd8>:70: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  external_df[f'{category}_value'] = external_df[common_columns].apply(\n","<ipython-input-39-6a2a8cf8bfd8>:70: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  external_df[f'{category}_value'] = external_df[common_columns].apply(\n"]}]},{"cell_type":"code","source":["external_df.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":384},"id":"wzI8mCgtlI3h","executionInfo":{"status":"ok","timestamp":1721203303001,"user_tz":-540,"elapsed":884,"user":{"displayName":"노재민","userId":"10900486183626163831"}},"outputId":"1c5f32df-73ab-4e9e-ceff-5293bb0788d8"},"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             index         종합등급   stock_code         자산총계     녹색 기업 지정  \\\n","count  2871.000000  2871.000000  2871.000000  2871.000000  2871.000000   \n","mean      0.606495     0.199582     0.144075     0.010850     0.035876   \n","std       0.327587     0.283755     0.210550     0.051213     0.186013   \n","min       0.000000     0.000000     0.000000     0.000000     0.000000   \n","25%       0.428795     0.000000     0.013263     0.000577     0.000000   \n","50%       0.714397     0.000000     0.039710     0.001396     0.000000   \n","75%       1.000000     0.333333     0.203111     0.004461     0.000000   \n","max       1.000000     1.000000     1.000000     1.000000     1.000000   \n","\n","               매출액         영업이익   영업이익(발표기준)        당기순이익      지배주주순이익  ...  \\\n","count  2871.000000  2871.000000  2871.000000  2871.000000  2871.000000  ...   \n","mean      0.011176     0.133728     0.133743     0.143465     0.144975  ...   \n","std       0.046807     0.027241     0.027259     0.024024     0.023825  ...   \n","min       0.000000     0.000000     0.000000     0.000000     0.000000  ...   \n","25%       0.000638     0.130255     0.130257     0.141012     0.142711  ...   \n","50%       0.001797     0.130574     0.130575     0.141254     0.142949  ...   \n","75%       0.005596     0.131736     0.131738     0.142058     0.143680  ...   \n","max       1.000000     1.000000     1.000000     1.000000     1.000000  ...   \n","\n","       여성 평균 연봉_cluster  남성 정규직 비율_cluster  여성 정규직 비율_cluster  장애인고용률_cluster  \\\n","count       2871.000000        2871.000000        2871.000000     2871.000000   \n","mean           0.195228           0.140543           0.406479        0.057123   \n","std            0.365224           0.342943           0.330842        0.210468   \n","min            0.000000           0.000000           0.000000        0.000000   \n","25%            0.000000           0.000000           0.000000        0.000000   \n","50%            0.000000           0.000000           0.500000        0.000000   \n","75%            0.000000           0.000000           0.500000        0.000000   \n","max            1.000000           1.000000           1.000000        1.000000   \n","\n","       장애인근로자수_cluster      E_value      S_value      G_value     재무_value  \\\n","count      2871.000000  2871.000000  2871.000000  2871.000000  2871.000000   \n","mean          0.320794    -0.928820     1.335615     0.741693     1.982759   \n","std           0.466490     0.752278     0.747557     0.396805     1.012415   \n","min           0.000000    -1.512055    -0.108837     0.107797     0.374947   \n","25%           0.000000    -1.512055     0.702948     0.411368     1.193568   \n","50%           0.000000    -1.512055     1.290370     0.760539     1.850048   \n","75%           1.000000    -0.332849     1.955073     1.003588     2.777718   \n","max           1.000000     1.342705     3.954483     1.834767     6.103574   \n","\n","         성장성_value  \n","count  2871.000000  \n","mean      0.033936  \n","std       0.034705  \n","min       0.001609  \n","25%       0.027996  \n","50%       0.028744  \n","75%       0.029560  \n","max       0.298262  \n","\n","[8 rows x 115 columns]"],"text/html":["\n","  <div id=\"df-6a5af9b3-1158-4094-ac23-df7db42c5619\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>index</th>\n","      <th>종합등급</th>\n","      <th>stock_code</th>\n","      <th>자산총계</th>\n","      <th>녹색 기업 지정</th>\n","      <th>매출액</th>\n","      <th>영업이익</th>\n","      <th>영업이익(발표기준)</th>\n","      <th>당기순이익</th>\n","      <th>지배주주순이익</th>\n","      <th>...</th>\n","      <th>여성 평균 연봉_cluster</th>\n","      <th>남성 정규직 비율_cluster</th>\n","      <th>여성 정규직 비율_cluster</th>\n","      <th>장애인고용률_cluster</th>\n","      <th>장애인근로자수_cluster</th>\n","      <th>E_value</th>\n","      <th>S_value</th>\n","      <th>G_value</th>\n","      <th>재무_value</th>\n","      <th>성장성_value</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>2871.000000</td>\n","      <td>2871.000000</td>\n","      <td>2871.000000</td>\n","      <td>2871.000000</td>\n","      <td>2871.000000</td>\n","      <td>2871.000000</td>\n","      <td>2871.000000</td>\n","      <td>2871.000000</td>\n","      <td>2871.000000</td>\n","      <td>2871.000000</td>\n","      <td>...</td>\n","      <td>2871.000000</td>\n","      <td>2871.000000</td>\n","      <td>2871.000000</td>\n","      <td>2871.000000</td>\n","      <td>2871.000000</td>\n","      <td>2871.000000</td>\n","      <td>2871.000000</td>\n","      <td>2871.000000</td>\n","      <td>2871.000000</td>\n","      <td>2871.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>0.606495</td>\n","      <td>0.199582</td>\n","      <td>0.144075</td>\n","      <td>0.010850</td>\n","      <td>0.035876</td>\n","      <td>0.011176</td>\n","      <td>0.133728</td>\n","      <td>0.133743</td>\n","      <td>0.143465</td>\n","      <td>0.144975</td>\n","      <td>...</td>\n","      <td>0.195228</td>\n","      <td>0.140543</td>\n","      <td>0.406479</td>\n","      <td>0.057123</td>\n","      <td>0.320794</td>\n","      <td>-0.928820</td>\n","      <td>1.335615</td>\n","      <td>0.741693</td>\n","      <td>1.982759</td>\n","      <td>0.033936</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>0.327587</td>\n","      <td>0.283755</td>\n","      <td>0.210550</td>\n","      <td>0.051213</td>\n","      <td>0.186013</td>\n","      <td>0.046807</td>\n","      <td>0.027241</td>\n","      <td>0.027259</td>\n","      <td>0.024024</td>\n","      <td>0.023825</td>\n","      <td>...</td>\n","      <td>0.365224</td>\n","      <td>0.342943</td>\n","      <td>0.330842</td>\n","      <td>0.210468</td>\n","      <td>0.466490</td>\n","      <td>0.752278</td>\n","      <td>0.747557</td>\n","      <td>0.396805</td>\n","      <td>1.012415</td>\n","      <td>0.034705</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>...</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>-1.512055</td>\n","      <td>-0.108837</td>\n","      <td>0.107797</td>\n","      <td>0.374947</td>\n","      <td>0.001609</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>0.428795</td>\n","      <td>0.000000</td>\n","      <td>0.013263</td>\n","      <td>0.000577</td>\n","      <td>0.000000</td>\n","      <td>0.000638</td>\n","      <td>0.130255</td>\n","      <td>0.130257</td>\n","      <td>0.141012</td>\n","      <td>0.142711</td>\n","      <td>...</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>-1.512055</td>\n","      <td>0.702948</td>\n","      <td>0.411368</td>\n","      <td>1.193568</td>\n","      <td>0.027996</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>0.714397</td>\n","      <td>0.000000</td>\n","      <td>0.039710</td>\n","      <td>0.001396</td>\n","      <td>0.000000</td>\n","      <td>0.001797</td>\n","      <td>0.130574</td>\n","      <td>0.130575</td>\n","      <td>0.141254</td>\n","      <td>0.142949</td>\n","      <td>...</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.500000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>-1.512055</td>\n","      <td>1.290370</td>\n","      <td>0.760539</td>\n","      <td>1.850048</td>\n","      <td>0.028744</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>1.000000</td>\n","      <td>0.333333</td>\n","      <td>0.203111</td>\n","      <td>0.004461</td>\n","      <td>0.000000</td>\n","      <td>0.005596</td>\n","      <td>0.131736</td>\n","      <td>0.131738</td>\n","      <td>0.142058</td>\n","      <td>0.143680</td>\n","      <td>...</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.500000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>-0.332849</td>\n","      <td>1.955073</td>\n","      <td>1.003588</td>\n","      <td>2.777718</td>\n","      <td>0.029560</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>...</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.342705</td>\n","      <td>3.954483</td>\n","      <td>1.834767</td>\n","      <td>6.103574</td>\n","      <td>0.298262</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>8 rows × 115 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6a5af9b3-1158-4094-ac23-df7db42c5619')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6a5af9b3-1158-4094-ac23-df7db42c5619 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6a5af9b3-1158-4094-ac23-df7db42c5619');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-76e6eb7d-70c0-405a-b644-4ad5b56055f1\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-76e6eb7d-70c0-405a-b644-4ad5b56055f1')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-76e6eb7d-70c0-405a-b644-4ad5b56055f1 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe"}},"metadata":{},"execution_count":35}]},{"cell_type":"code","source":["df=external_df"],"metadata":{"id":"RIYQVxbXTdI9","executionInfo":{"status":"ok","timestamp":1721203414825,"user_tz":-540,"elapsed":289,"user":{"displayName":"노재민","userId":"10900486183626163831"}}},"execution_count":40,"outputs":[]},{"cell_type":"code","source":["# 등급을 나누는 기준 퍼센트\n","percentiles = [1.1, 18.9, 35.2, 49.6, 78.6]\n","\n","# 등급 레이블\n","grades = ['a+', 'a', 'b+', 'b', 'c', 'd']\n","\n","def assign_grade(series, percentiles, grades):\n","    # 값을 등급화할 때 동점자가 있을 경우 동일한 등급을 받도록 함\n","    rank_series = series.rank(method='min', pct=True) * 100\n","    bins = [0] + percentiles + [100]\n","    return pd.cut(rank_series, bins=bins, labels=grades, include_lowest=True)\n","\n","# 등급을 매길 컬럼들\n","target_columns = ['E_value', 'S_value', 'G_value', '재무_value', '성장성_value']\n","\n","# 각 컬럼에 등급을 매기기\n","grade_columns = {}\n","for column in target_columns:\n","    grade_columns[column + '_등급'] = assign_grade(df[column], percentiles, grades)\n","\n","# 등급 컬럼들을 데이터프레임에 한 번에 추가\n","df = pd.concat([df, pd.DataFrame(grade_columns)], axis=1)\n","\n","# 결과 출력\n","print(df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zK8X0d01oLVw","executionInfo":{"status":"ok","timestamp":1721201945544,"user_tz":-540,"elapsed":353,"user":{"displayName":"노재민","userId":"10900486183626163831"}},"outputId":"0199ef87-caf6-4998-db16-76ab1d7c20af"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["         index      종합등급       회사명  stock_code      자산총계  녹색 기업 지정       매출액  \\\n","0     0.143192  0.000000      동화약품    0.000000  0.000906       0.0  0.000893   \n","1     0.428795  0.000000      동화약품    0.000000  0.000937       0.0  0.000962   \n","2     0.714397  0.000000      동화약품    0.000000  0.000966       0.0  0.001119   \n","3     1.000000  0.000000      동화약품    0.000000  0.001194       0.0  0.001188   \n","4     0.143192  0.000000     KR모터스    0.000052  0.000297       0.0  0.000382   \n","...        ...       ...       ...         ...       ...       ...       ...   \n","2866  1.000000  0.000000       디어유    0.980458  0.000373       0.0  0.000243   \n","2867  1.000000  0.000000    화승알앤에이    0.987102  0.000900       0.0  0.002245   \n","2868  1.000000  0.333333       F&F    0.998489  0.004353       0.0  0.006539   \n","2869  1.000000  0.000000  에코프로에이치엔    0.998723  0.000450       0.0  0.000750   \n","2870  1.000000  0.666667     LX홀딩스    1.000000  0.003680       0.0  0.000383   \n","\n","          영업이익  영업이익(발표기준)     당기순이익  ...   E_value   S_value   G_value  \\\n","0     0.130609    0.130609  0.141472  ... -1.512055  1.907624  0.762864   \n","1     0.130597    0.130597  0.141332  ... -1.512055  1.917345  0.884211   \n","2     0.130722    0.130722  0.141362  ... -1.512055  1.914746  0.906279   \n","3     0.130535    0.130535  0.141464  ... -1.512055  1.982998  0.888667   \n","4     0.130238    0.130238  0.140852  ... -1.512055 -0.088401  0.524622   \n","...        ...         ...       ...  ...       ...       ...       ...   \n","2866  0.130700    0.130700  0.141433  ... -0.951421  1.031110  0.886977   \n","2867  0.130754    0.130754  0.141403  ... -0.951421  1.570120  1.193538   \n","2868  0.139513    0.139513  0.147589  ... -1.512055  1.717237  0.916666   \n","2869  0.130922    0.130922  0.141546  ... -1.512055  1.322656  0.931503   \n","2870  0.131451    0.131451  0.142245  ... -0.951421  0.396785  1.181751   \n","\n","      재무_value  성장성_value  E_value_등급  S_value_등급  G_value_등급  재무_value_등급  \\\n","0     1.808601   0.028586          a+           c           c            b   \n","1     1.606126   0.028232          a+           c           c            b   \n","2     1.414489   0.028533          a+           c           c           b+   \n","3     1.627199   0.028333          a+           c           c            b   \n","4     0.717459   0.028125          a+          a+          b+            a   \n","...        ...        ...         ...         ...         ...          ...   \n","2866  1.204443   0.027918           c           b           c           b+   \n","2867  1.145389   0.030251           c           c           d           b+   \n","2868  3.040573   0.028800          a+           c           c            d   \n","2869  1.317061   0.029013          a+           c           c           b+   \n","2870  1.952654   0.027135           c           a           d            c   \n","\n","      성장성_value_등급  \n","0                b  \n","1               b+  \n","2                b  \n","3               b+  \n","4               b+  \n","...            ...  \n","2866            b+  \n","2867             d  \n","2868             c  \n","2869             c  \n","2870             a  \n","\n","[2871 rows x 122 columns]\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","\n","\n","# 등급을 나누는 기준 퍼센트\n","percentiles = [1.1, 18.9, 35.2, 49.6, 78.6]\n","\n","# 등급 레이블\n","grades = ['a+', 'a', 'b+', 'b', 'c', 'd']\n","\n","def assign_grade(series, percentiles, grades, ascending=True):\n","    # 값을 등급화할 때 동점자가 있을 경우 동일한 등급을 받도록 함\n","    rank_series = series.rank(method='min', ascending=ascending, pct=True) * 100\n","    bins = [0] + percentiles + [100]\n","    return pd.cut(rank_series, bins=bins, labels=grades, include_lowest=True)\n","\n","# 등급을 매길 컬럼들\n","target_columns = ['E_value', 'S_value', 'G_value', '재무_value', '성장성_value']\n","\n","# 각 컬럼에 등급을 매기기\n","grade_columns = {}\n","for column in target_columns:\n","    if column == 'E_value':\n","        grade_columns[column + '_등급'] = assign_grade(df[column], percentiles, grades, ascending=False)\n","    else:\n","        grade_columns[column + '_등급'] = assign_grade(df[column], percentiles, grades, ascending=True)\n","\n","# 등급 컬럼들을 데이터프레임에 한 번에 추가\n","df = pd.concat([df, pd.DataFrame(grade_columns)], axis=1)\n","\n","# 결과 출력\n","print(df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pVAIBs6hsUdg","executionInfo":{"status":"ok","timestamp":1721203425187,"user_tz":-540,"elapsed":366,"user":{"displayName":"노재민","userId":"10900486183626163831"}},"outputId":"24cbde16-c1ee-423c-825e-6e03c2641b2c"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["         index      종합등급       회사명  stock_code      자산총계  녹색 기업 지정       매출액  \\\n","0     0.143192  0.000000      동화약품    0.000000  0.000906       0.0  0.000893   \n","1     0.428795  0.000000      동화약품    0.000000  0.000937       0.0  0.000962   \n","2     0.714397  0.000000      동화약품    0.000000  0.000966       0.0  0.001119   \n","3     1.000000  0.000000      동화약품    0.000000  0.001194       0.0  0.001188   \n","4     0.143192  0.000000     KR모터스    0.000052  0.000297       0.0  0.000382   \n","...        ...       ...       ...         ...       ...       ...       ...   \n","2866  1.000000  0.000000       디어유    0.980458  0.000373       0.0  0.000243   \n","2867  1.000000  0.000000    화승알앤에이    0.987102  0.000900       0.0  0.002245   \n","2868  1.000000  0.333333       F&F    0.998489  0.004353       0.0  0.006539   \n","2869  1.000000  0.000000  에코프로에이치엔    0.998723  0.000450       0.0  0.000750   \n","2870  1.000000  0.666667     LX홀딩스    1.000000  0.003680       0.0  0.000383   \n","\n","          영업이익  영업이익(발표기준)     당기순이익  ...   E_value   S_value   G_value  \\\n","0     0.130609    0.130609  0.141472  ... -1.512055  1.907624  0.762864   \n","1     0.130597    0.130597  0.141332  ... -1.512055  1.917345  0.884211   \n","2     0.130722    0.130722  0.141362  ... -1.512055  1.914746  0.906279   \n","3     0.130535    0.130535  0.141464  ... -1.512055  1.982998  0.888667   \n","4     0.130238    0.130238  0.140852  ... -1.512055 -0.088401  0.524622   \n","...        ...         ...       ...  ...       ...       ...       ...   \n","2866  0.130700    0.130700  0.141433  ... -0.951421  1.031110  0.886977   \n","2867  0.130754    0.130754  0.141403  ... -0.951421  1.570120  1.193538   \n","2868  0.139513    0.139513  0.147589  ... -1.512055  1.717237  0.916666   \n","2869  0.130922    0.130922  0.141546  ... -1.512055  1.322656  0.931503   \n","2870  0.131451    0.131451  0.142245  ... -0.951421  0.396785  1.181751   \n","\n","      재무_value  성장성_value  E_value_등급  S_value_등급  G_value_등급  재무_value_등급  \\\n","0     1.808601   0.028586           b           c           c            b   \n","1     1.606126   0.028232           b           c           c            b   \n","2     1.414489   0.028533           b           c           c           b+   \n","3     1.627199   0.028333           b           c           c            b   \n","4     0.717459   0.028125           b          a+          b+            a   \n","...        ...        ...         ...         ...         ...          ...   \n","2866  1.204443   0.027918          b+           b           c           b+   \n","2867  1.145389   0.030251          b+           c           d           b+   \n","2868  3.040573   0.028800           b           c           c            d   \n","2869  1.317061   0.029013           b           c           c           b+   \n","2870  1.952654   0.027135          b+           a           d            c   \n","\n","      성장성_value_등급  \n","0                b  \n","1               b+  \n","2                b  \n","3               b+  \n","4               b+  \n","...            ...  \n","2866            b+  \n","2867             d  \n","2868             c  \n","2869             c  \n","2870             a  \n","\n","[2871 rows x 122 columns]\n"]}]},{"cell_type":"code","source":["df.to_excel('/content/drive/MyDrive/KDT/최종 프로젝트/제목없는 폴더7/전처리한데이터 점수기입5.xlsx')"],"metadata":{"id":"q63a9uKoVTVh","executionInfo":{"status":"ok","timestamp":1721203459948,"user_tz":-540,"elapsed":14351,"user":{"displayName":"노재민","userId":"10900486183626163831"}}},"execution_count":42,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","\n","# External DataFrame Load\n","external_df = pd.read_excel('/content/drive/MyDrive/KDT/최종 프로젝트/제목없는 폴더7/전처리한데이터 (1).xlsx')\n","\n","# 중분류 정의\n","categories = {\n","    'E': ['녹색 기업 지정', '온실가스 배출총량 등급', '용수 사용량 등급', '에너지 총량 등급', '환경지표', 'sbti', 'RE100', '지속가능경영 보고서공시여부'],\n","    'S': ['N직원 수', 'N남성 정규직 수', 'N남성 직원 수', 'N여성 직원 수', 'N여성 정규직 수', '여성 평균 연봉', '총 평균급여',\n","          '남성 평균 연봉', '직원 수', '남성 직원 수', '여성 직원 수', '남성 정규직 수', '여성 정규직 수', '여성 임원 수',\n","          '여성 평균 연봉_cluster', '여성 임원 비율_cluster', '총 여성 임원 수변화율', '여성 직원 비율_cluster', '여성 직원 비율', '남성 평균 연봉_cluster',\n","          '여성 정규직 비율_cluster', '남성 직원 비율_cluster', '남성 정규직 비율', '남성 정규직 비율_cluster', '장애인근로자수_cluster',\n","          '장애인고용률_cluster', '조직의변화율'],\n","    'G': ['N사외이사 수', '사외이사 수', '사외이사 비율_cluster', '이사의 수', '사외이사 비율', '총임원수변화율_abs',\n","          '외국인 지분율', '총임원수변화율', '총 외국인 보유수량변화율', '총 임원 수', '외국인 보유수량'],\n","    '재무': ['N부채총계', 'N매출액', 'N자본총계', 'N지배주주지분', 'N자산총계', 'N시가총액', '부채총계', '자산총계', '자본금', '매출액',\n","             '시가총액', 'BPS(원)', 'EPS(원)', 'DPS(원)', '자본총계', '지배주주지분', '비지배주주지분', 'ROA', 'ROE', '당기순이익',\n","             '영업이익(발표기준)', '영업이익', '영업이익률', '배당수익률', '발행주식수', '상장주식수', 'PBR', '유보율',\n","             '비지배주주순이익', '비지배주주이익', '지배주주순이익', '지배주주이익', '지배주주순이익률', '자본비율'],\n","    '성장성': ['매출액_cluster', '매출액_상승률(퍼센트)', '영업이익_상승률', '배당수익률_상승률', '총 PBR변화율', '총 자본총계변화율',\n","             '총 시가총액변화율', '총 평균급여변화율', '총 주가변화율',\n","             '효율성지표', '총직원수변화율']\n","}\n","\n","# 상관관계 데이터프레임 로드 (예제 데이터 사용)\n","correlation_df = pd.DataFrame({\n","\n","    'column': ['target_ESG', 'N부채총계', 'N매출액', 'N자본총계', 'N지배주주지분', 'N자산총계', 'N시가총액', '지속가능경영 보고서공시여부',\n","                    'N사외이사 수', '사외이사 수', 'N직원 수', 'N남성 정규직 수', 'GICS_Industry_encoded', 'N남성 직원 수', '사외이사 비율_cluster',\n","                    'N여성 직원 수', 'N여성 정규직 수', 'sbti', '이사의 수', '외국인 지분율', '여성 평균 연봉', '총 임원 수', '매출액',\n","                    '사외이사 비율', '남성 평균 연봉', '부채총계', '자산총계', '자본금', '여성 임원 수', '매출액_cluster', 'DPS(원)', '비지배주주지분',\n","                    '녹색 기업 지정', '총 평균급여', '유보율', '자본총계', '직원 수', '장애인근로자수_cluster', '남성 직원 수', '여성 직원 수',\n","                    '남성 정규직 수', '여성 정규직 수', 'RE100', '지배주주지분', '총임원수변화율_abs', '비지배주주순이익', 'GICS_Sector_encoded',\n","                    '지배주주지분가치', '여성 평균 연봉_cluster', '영업이익(발표기준)', '영업이익', '여성 임원 비율_cluster', '시가총액', '배당수익률',\n","                    '여성 임원 비율', '당기순이익', 'BPS(원)', 'EPS(원)', '지배주주순이익', '여성 직원 비율_cluster', '시가총액_유보율', '남성 평균 연봉_cluster',\n","                    'ROA', '발행주식수', '총임원수변화율', '상장주식수', '비지배주주이익', 'ROE', '시가총액_배당수익률', '여성 직원 비율', '외국인 보유수량',\n","                    '영업이익률', '남성 직원 비율_cluster', 'wage_increase_percentage', '영업이익_상승률', '지배주주이익', '지배주주순이익률', '배당수익률_상승률',\n","                    '여성 정규직 비율_cluster', '부채비율', '총 주가변화율', '효율성지표', '총 외국인 보유수량변화율', '총 부채총계변화율', '남성 정규직 비율',\n","                    '총 PBR변화율', '정규직비율', '매출액_상승률(퍼센트)', '남성 정규직 비율_cluster', '조직의변화율', '총직원수변화율', 'index', '영업이익률_상승률',\n","                    'PBR', '총 자본총계변화율', '총 시가총액변화율', '여성 정규직 비율', '총 외국인 지분율변화율', '총 평균급여변화율', 'high_carbon', '남성 직원 비율',\n","                    '장애인고용률_cluster', '자본비율', '총 여성 임원 수변화율', '온실가스 배출총량 등급', '용수 사용량 등급', '에너지 총량 등급', '환경지표', '기업분류'],\n","    'correlation': [0.772264, 0.598767, 0.598326, 0.594607, 0.592873, 0.582386, 0.580901, 0.560634, 0.514758, 0.513269, 0.430334, 0.423220, 0.419456,\n","                    0.411256, 0.409185, 0.389040, 0.382901, 0.366629, 0.365118, 0.354995, 0.307153, 0.301724, 0.295827, 0.271616, 0.267657, 0.264856,\n","                    0.261137, 0.261000, 0.256956, 0.242506, 0.230855, 0.230734, 0.228485, 0.223490, 0.223425, 0.211481, 0.206975, 0.206722, 0.202479,\n","                    0.202351, 0.197781, 0.193643, 0.186957, 0.186563, 0.176209, 0.175486, 0.173358, 0.172969, 0.165615, 0.161514, 0.161436, 0.158055,\n","                    0.157315, 0.151023, 0.140516, 0.140105, 0.133165, 0.130919, 0.130079, 0.128908, 0.127773, 0.123548, 0.120517, 0.112903, 0.110399,\n","                    0.109987, 0.105083, 0.104014, 0.100758, 0.096386, 0.093895, 0.092684, 0.088515, 0.081930, 0.064704, 0.060672, 0.058502, 0.054722,\n","                    0.035321, 0.035207, 0.028561, 0.026006, 0.023028, 0.022837, 0.022830, 0.018202, 0.017031, 0.012194, 0.006208, 0.001336, 0.001047,\n","                    -0.001756, -0.004003, -0.013579, -0.014079, -0.016716, -0.031543, -0.055760, -0.065580, -0.089384, -0.091616, -0.106428, -0.128567,\n","                    -0.161057, -0.319907, -0.392080, -0.398881, -0.401187, -0.487831]\n","})\n","\n","# 중분류별로 값을 상관관계 계수와 곱한 후 합산하여 새로운 컬럼 추가\n","for category, columns in categories.items():\n","    # 해당 중분류의 컬럼이 external_df에 존재하는 경우에만 처리\n","    common_columns = [col for col in columns if col in external_df.columns]\n","\n","    if common_columns:\n","        # 상관관계 계수와 매핑\n","        correlation_dict = correlation_df.set_index('column')['correlation'].to_dict()\n","        external_df[f'{category}_value'] = external_df[common_columns].apply(\n","            lambda row: sum(row[col] * correlation_dict[col] for col in common_columns if col in correlation_dict),\n","            axis=1\n","        )\n","\n","# 등급을 부여할 percentiles 정의\n","percentiles = [0, 1.1, 18.9, 35.2, 49.6, 78.6, 100]\n","grades = ['A+', 'A', 'B+', 'B', 'C', 'D', 'F']\n","\n","# 각 중분류별 값을 percentiles에 따라 등급을 매기는 함수\n","def assign_grade(values, percentiles, grades):\n","    percentile_values = np.percentile(values, percentiles, method='nearest')\n","    # 중복된 값을 제거합니다.\n","    percentile_values = np.unique(percentile_values)\n","    return pd.cut(values, bins=percentile_values, labels=grades, include_lowest=True, duplicates='drop')\n","\n","# 각 중분류별로 등급 컬럼 추가\n","for category in categories.keys():\n","    if f'{category}_value' in external_df.columns:\n","        values = external_df[f'{category}_value']\n","        external_df[f'{category}_grade'] = assign_grade(values, percentiles, grades)\n","# 결과 출력\n","import ace_tools as tools; tools.display_dataframe_to_user(name=\"External DataFrame with Grades\", dataframe=external_df)\n","print(external_df.head())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":371},"id":"Nzv7VW0bTa_F","executionInfo":{"status":"error","timestamp":1721180161526,"user_tz":-540,"elapsed":4818,"user":{"displayName":"노재민","userId":"10900486183626163831"}},"outputId":"94f1fcde-3b04-4205-8670-e8e2614158db"},"execution_count":11,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"Bin labels must be one fewer than the number of bin edges","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-11-358111f032b7>\u001b[0m in \u001b[0;36m<cell line: 79>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     80\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;34mf'{category}_value'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mexternal_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     81\u001b[0m         \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mexternal_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34mf'{category}_value'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 82\u001b[0;31m         \u001b[0mexternal_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34mf'{category}_grade'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0massign_grade\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpercentiles\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrades\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     83\u001b[0m \u001b[0;31m# 결과 출력\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     84\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mace_tools\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mtools\u001b[0m\u001b[0;34m;\u001b[0m \u001b[0mtools\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdisplay_dataframe_to_user\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"External DataFrame with Grades\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdataframe\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mexternal_df\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-11-358111f032b7>\u001b[0m in \u001b[0;36massign_grade\u001b[0;34m(values, percentiles, grades)\u001b[0m\n\u001b[1;32m     74\u001b[0m     \u001b[0;31m# 중복된 값을 제거합니다.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     75\u001b[0m     \u001b[0mpercentile_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpercentile_values\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 76\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcut\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbins\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpercentile_values\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mgrades\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minclude_lowest\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mduplicates\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'drop'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     77\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     78\u001b[0m \u001b[0;31m# 각 중분류별로 등급 컬럼 추가\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/reshape/tile.py\u001b[0m in \u001b[0;36mcut\u001b[0;34m(x, bins, right, labels, retbins, precision, include_lowest, duplicates, ordered)\u001b[0m\n\u001b[1;32m    291\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"bins must increase monotonically.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    292\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 293\u001b[0;31m     fac, bins = _bins_to_cuts(\n\u001b[0m\u001b[1;32m    294\u001b[0m         \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    295\u001b[0m         \u001b[0mbins\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/reshape/tile.py\u001b[0m in \u001b[0;36m_bins_to_cuts\u001b[0;34m(x, bins, right, labels, precision, include_lowest, dtype, duplicates, ordered)\u001b[0m\n\u001b[1;32m    451\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    452\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbins\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 453\u001b[0;31m                 raise ValueError(\n\u001b[0m\u001b[1;32m    454\u001b[0m                     \u001b[0;34m\"Bin labels must be one fewer than the number of bin edges\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    455\u001b[0m                 )\n","\u001b[0;31mValueError\u001b[0m: Bin labels must be one fewer than the number of bin edges"]}]},{"cell_type":"code","source":["external_df.to_excel('/content/drive/MyDrive/KDT/최종 프로젝트/제목없는 폴더7/전처리한데이터2 (1).xlsx')"],"metadata":{"id":"VitJlfUJ7ANw"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[],"mount_file_id":"1zHFKkzEv1exOE2T4I8u3QuU4ytAC5lvN","authorship_tag":"ABX9TyPJSbjVqvHRFhqvJW05PP0X"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}