{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMvl1JZclHsJhw8EqH4+SlB"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["from urllib import parse\n","import pandas as pd"],"metadata":{"id":"1u1CV4B67wt7"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# ESG기업 종목코드 리스트로 불러오기"],"metadata":{"id":"HrOoFVO48viP"}},{"cell_type":"code","source":["path = \"esg기업추출.xlsx\"\n","stock_code = pd.read_excel(path)"],"metadata":{"id":"xiv8KYDE8zS8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 'stock_code' 컬럼의 값을 여섯 자리로 맞춰주는 함수\n","def format_stock_code(code):\n","    return str(code).zfill(6)\n","\n","# 'stock_code' 컬럼의 값들을 포맷팅\n","stock_code['stock_code'] = stock_code['stock_code'].apply(format_stock_code)\n","\n","# 'stock_code' 컬럼의 값을 리스트로 변환\n","stock_code_list = stock_code['stock_code'].tolist()\n","\n","# 결과 출력\n","display(stock_code_list)"],"metadata":{"id":"_m-0PAVR81i7"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Fnguide에서 크롤링"],"metadata":{"id":"k04CO3Nm85xT"}},{"cell_type":"code","source":["def get_fnguide(code):\n","    get_param = {\n","        'pGB': 1,\n","        'gicode': 'A%s' % (code),\n","        'cID': '',\n","        'MenuYn': 'Y',\n","        'ReportGB': '',\n","        'NewMenuID': 101,\n","        'stkGb': 701,\n","    }\n","\n","    get_param = parse.urlencode(get_param)\n","    url = \"http://comp.fnguide.com/SVO2/ASP/SVD_Main.asp?%s\" % (get_param)\n","    tables = pd.read_html(url, header=1)\n","    return tables\n","\n","# 종목코드에 따른 데이터를 가져와서 11번째 테이블을 데이터프레임으로 변환하는 함수\n","def transform_fnguide(code):\n","    tables = get_fnguide(code)\n","    df = tables[11]\n","\n","    # 'IFRS(연결)' 컬럼을 인덱스로 설정하고, 데이터를 전치(transpose)하여 새로운 데이터프레임 생성\n","    transformed_df = df.set_index('IFRS(연결)').T\n","\n","    # 인덱스 재설정\n","    transformed_df.reset_index(inplace=True)\n","\n","    # 'stock_code' 컬럼을 추가하고 종목코드 삽입\n","    transformed_df['stock_code'] = code\n","\n","    return transformed_df\n","\n","# 여러 종목코드에 대해 데이터프레임 생성\n","def generate_dataframes(codes):\n","    dfs = []\n","    for code in codes:\n","        df = transform_fnguide(code)\n","        dfs.append(df)\n","    return dfs\n","\n","# 각 종목에 대한 데이터프레임 생성\n","result_dfs = generate_dataframes(stock_code_list)\n","\n","# 각 데이터프레임을 합쳐서 행으로 합침\n","concatenated_df = pd.concat(result_dfs, ignore_index=True)\n","\n","# 결과 출력\n","display(concatenated_df)"],"metadata":{"id":"jo6At39p8hwZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["concatenated_df.to_csv('ESG기업의 재무제표_Fnguide크롤링')"],"metadata":{"id":"qVLsvdHH8sEr"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 데이터 전처리"],"metadata":{"id":"3uFggsKM2dgp"}},{"cell_type":"code","source":["path = \"ESG기업의 재무제표_Fnguide크롤링.csv\"\n","concatenated_df = pd.read_csv(path)"],"metadata":{"id":"KWGYe1Zb2srU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["concatenated_df = concatenated_df.drop(columns = ['영업수익'])\n","concatenated_df"],"metadata":{"id":"Y8o_fqLv2u-K"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import re\n","# '(E)' 부분을 제거하고 'index' 컬럼의 값을 datetime 형식으로 변환합니다.\n","# concatenated_df['index'] = concatenated_df['index'].apply(lambda x: re.sub(r'\\(E\\)$', '', x))\n","# concatenated_df['index'] = concatenated_df['index'].apply(lambda x: re.sub(r'\\(P\\)$', '', x))\n","concatenated_df['index'] = pd.to_datetime(concatenated_df['index'], format='%Y/%m')\n","\n","# 'index' 컬럼의 값을 기준으로 필터링하여 원하는 범위의 값만 남겨둡니다.\n","concatenated_df = concatenated_df[(concatenated_df['index'] >= '2020/03') & (concatenated_df['index'] <= '2023/12')]\n","display(concatenated_df)"],"metadata":{"id":"rD11yKdF2yTM"},"execution_count":null,"outputs":[]}]}